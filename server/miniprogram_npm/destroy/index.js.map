{"version":3,"sources":["index.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["/*!\r\n * destroy\r\n * Copyright(c) 2014 Jonathan Ong\r\n * Copyright(c) 2015-2022 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\r\n\r\n\r\n\r\n/**\r\n * Module dependencies.\r\n * @private\r\n */\r\n\r\nvar EventEmitter = require('events').EventEmitter\r\nvar ReadStream = require('fs').ReadStream\r\nvar Stream = require('stream')\r\nvar Zlib = require('zlib')\r\n\r\n/**\r\n * Module exports.\r\n * @public\r\n */\r\n\r\nmodule.exports = destroy\r\n\r\n/**\r\n * Destroy the given stream, and optionally suppress any future `error` events.\r\n *\r\n * @param {object} stream\r\n * @param {boolean} suppress\r\n * @public\r\n */\r\n\r\nfunction destroy (stream, suppress) {\r\n  if (isFsReadStream(stream)) {\r\n    destroyReadStream(stream)\r\n  } else if (isZlibStream(stream)) {\r\n    destroyZlibStream(stream)\r\n  } else if (hasDestroy(stream)) {\r\n    stream.destroy()\r\n  }\r\n\r\n  if (isEventEmitter(stream) && suppress) {\r\n    stream.removeAllListeners('error')\r\n    stream.addListener('error', noop)\r\n  }\r\n\r\n  return stream\r\n}\r\n\r\n/**\r\n * Destroy a ReadStream.\r\n *\r\n * @param {object} stream\r\n * @private\r\n */\r\n\r\nfunction destroyReadStream (stream) {\r\n  stream.destroy()\r\n\r\n  if (typeof stream.close === 'function') {\r\n    // node.js core bug work-around\r\n    stream.on('open', onOpenClose)\r\n  }\r\n}\r\n\r\n/**\r\n * Close a Zlib stream.\r\n *\r\n * Zlib streams below Node.js 4.5.5 have a buggy implementation\r\n * of .close() when zlib encountered an error.\r\n *\r\n * @param {object} stream\r\n * @private\r\n */\r\n\r\nfunction closeZlibStream (stream) {\r\n  if (stream._hadError === true) {\r\n    var prop = stream._binding === null\r\n      ? '_binding'\r\n      : '_handle'\r\n\r\n    stream[prop] = {\r\n      close: function () { this[prop] = null }\r\n    }\r\n  }\r\n\r\n  stream.close()\r\n}\r\n\r\n/**\r\n * Destroy a Zlib stream.\r\n *\r\n * Zlib streams don't have a destroy function in Node.js 6. On top of that\r\n * simply calling destroy on a zlib stream in Node.js 8+ will result in a\r\n * memory leak. So until that is fixed, we need to call both close AND destroy.\r\n *\r\n * PR to fix memory leak: https://github.com/nodejs/node/pull/23734\r\n *\r\n * In Node.js 6+8, it's important that destroy is called before close as the\r\n * stream would otherwise emit the error 'zlib binding closed'.\r\n *\r\n * @param {object} stream\r\n * @private\r\n */\r\n\r\nfunction destroyZlibStream (stream) {\r\n  if (typeof stream.destroy === 'function') {\r\n    // node.js core bug work-around\r\n    // istanbul ignore if: node.js 0.8\r\n    if (stream._binding) {\r\n      // node.js < 0.10.0\r\n      stream.destroy()\r\n      if (stream._processing) {\r\n        stream._needDrain = true\r\n        stream.once('drain', onDrainClearBinding)\r\n      } else {\r\n        stream._binding.clear()\r\n      }\r\n    } else if (stream._destroy && stream._destroy !== Stream.Transform.prototype._destroy) {\r\n      // node.js >= 12, ^11.1.0, ^10.15.1\r\n      stream.destroy()\r\n    } else if (stream._destroy && typeof stream.close === 'function') {\r\n      // node.js 7, 8\r\n      stream.destroyed = true\r\n      stream.close()\r\n    } else {\r\n      // fallback\r\n      // istanbul ignore next\r\n      stream.destroy()\r\n    }\r\n  } else if (typeof stream.close === 'function') {\r\n    // node.js < 8 fallback\r\n    closeZlibStream(stream)\r\n  }\r\n}\r\n\r\n/**\r\n * Determine if stream has destroy.\r\n * @private\r\n */\r\n\r\nfunction hasDestroy (stream) {\r\n  return stream instanceof Stream &&\r\n    typeof stream.destroy === 'function'\r\n}\r\n\r\n/**\r\n * Determine if val is EventEmitter.\r\n * @private\r\n */\r\n\r\nfunction isEventEmitter (val) {\r\n  return val instanceof EventEmitter\r\n}\r\n\r\n/**\r\n * Determine if stream is fs.ReadStream stream.\r\n * @private\r\n */\r\n\r\nfunction isFsReadStream (stream) {\r\n  return stream instanceof ReadStream\r\n}\r\n\r\n/**\r\n * Determine if stream is Zlib stream.\r\n * @private\r\n */\r\n\r\nfunction isZlibStream (stream) {\r\n  return stream instanceof Zlib.Gzip ||\r\n    stream instanceof Zlib.Gunzip ||\r\n    stream instanceof Zlib.Deflate ||\r\n    stream instanceof Zlib.DeflateRaw ||\r\n    stream instanceof Zlib.Inflate ||\r\n    stream instanceof Zlib.InflateRaw ||\r\n    stream instanceof Zlib.Unzip\r\n}\r\n\r\n/**\r\n * No-op function.\r\n * @private\r\n */\r\n\r\nfunction noop () {}\r\n\r\n/**\r\n * On drain handler to clear binding.\r\n * @private\r\n */\r\n\r\n// istanbul ignore next: node.js 0.8\r\nfunction onDrainClearBinding () {\r\n  this._binding.clear()\r\n}\r\n\r\n/**\r\n * On open handler to close stream.\r\n * @private\r\n */\r\n\r\nfunction onOpenClose () {\r\n  if (typeof this.fd === 'number') {\r\n    // actually close down the fd\r\n    this.close()\r\n  }\r\n}\r\n"]}