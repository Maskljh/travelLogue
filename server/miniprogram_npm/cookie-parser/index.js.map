{"version":3,"sources":["index.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["/*!\r\n * cookie-parser\r\n * Copyright(c) 2014 TJ Holowaychuk\r\n * Copyright(c) 2015 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\r\n\r\n\r\n\r\n/**\r\n * Module dependencies.\r\n * @private\r\n */\r\n\r\nvar cookie = require('cookie')\r\nvar signature = require('cookie-signature')\r\n\r\n/**\r\n * Module exports.\r\n * @public\r\n */\r\n\r\nmodule.exports = cookieParser\r\nmodule.exports.JSONCookie = JSONCookie\r\nmodule.exports.JSONCookies = JSONCookies\r\nmodule.exports.signedCookie = signedCookie\r\nmodule.exports.signedCookies = signedCookies\r\n\r\n/**\r\n * Parse Cookie header and populate `req.cookies`\r\n * with an object keyed by the cookie names.\r\n *\r\n * @param {string|array} [secret] A string (or array of strings) representing cookie signing secret(s).\r\n * @param {Object} [options]\r\n * @return {Function}\r\n * @public\r\n */\r\n\r\nfunction cookieParser (secret, options) {\r\n  var secrets = !secret || Array.isArray(secret)\r\n    ? (secret || [])\r\n    : [secret]\r\n\r\n  return function cookieParser (req, res, next) {\r\n    if (req.cookies) {\r\n      return next()\r\n    }\r\n\r\n    var cookies = req.headers.cookie\r\n\r\n    req.secret = secrets[0]\r\n    req.cookies = Object.create(null)\r\n    req.signedCookies = Object.create(null)\r\n\r\n    // no cookies\r\n    if (!cookies) {\r\n      return next()\r\n    }\r\n\r\n    req.cookies = cookie.parse(cookies, options)\r\n\r\n    // parse signed cookies\r\n    if (secrets.length !== 0) {\r\n      req.signedCookies = signedCookies(req.cookies, secrets)\r\n      req.signedCookies = JSONCookies(req.signedCookies)\r\n    }\r\n\r\n    // parse JSON cookies\r\n    req.cookies = JSONCookies(req.cookies)\r\n\r\n    next()\r\n  }\r\n}\r\n\r\n/**\r\n * Parse JSON cookie string.\r\n *\r\n * @param {String} str\r\n * @return {Object} Parsed object or undefined if not json cookie\r\n * @public\r\n */\r\n\r\nfunction JSONCookie (str) {\r\n  if (typeof str !== 'string' || str.substr(0, 2) !== 'j:') {\r\n    return undefined\r\n  }\r\n\r\n  try {\r\n    return JSON.parse(str.slice(2))\r\n  } catch (err) {\r\n    return undefined\r\n  }\r\n}\r\n\r\n/**\r\n * Parse JSON cookies.\r\n *\r\n * @param {Object} obj\r\n * @return {Object}\r\n * @public\r\n */\r\n\r\nfunction JSONCookies (obj) {\r\n  var cookies = Object.keys(obj)\r\n  var key\r\n  var val\r\n\r\n  for (var i = 0; i < cookies.length; i++) {\r\n    key = cookies[i]\r\n    val = JSONCookie(obj[key])\r\n\r\n    if (val) {\r\n      obj[key] = val\r\n    }\r\n  }\r\n\r\n  return obj\r\n}\r\n\r\n/**\r\n * Parse a signed cookie string, return the decoded value.\r\n *\r\n * @param {String} str signed cookie string\r\n * @param {string|array} secret\r\n * @return {String} decoded value\r\n * @public\r\n */\r\n\r\nfunction signedCookie (str, secret) {\r\n  if (typeof str !== 'string') {\r\n    return undefined\r\n  }\r\n\r\n  if (str.substr(0, 2) !== 's:') {\r\n    return str\r\n  }\r\n\r\n  var secrets = !secret || Array.isArray(secret)\r\n    ? (secret || [])\r\n    : [secret]\r\n\r\n  for (var i = 0; i < secrets.length; i++) {\r\n    var val = signature.unsign(str.slice(2), secrets[i])\r\n\r\n    if (val !== false) {\r\n      return val\r\n    }\r\n  }\r\n\r\n  return false\r\n}\r\n\r\n/**\r\n * Parse signed cookies, returning an object containing the decoded key/value\r\n * pairs, while removing the signed key from obj.\r\n *\r\n * @param {Object} obj\r\n * @param {string|array} secret\r\n * @return {Object}\r\n * @public\r\n */\r\n\r\nfunction signedCookies (obj, secret) {\r\n  var cookies = Object.keys(obj)\r\n  var dec\r\n  var key\r\n  var ret = Object.create(null)\r\n  var val\r\n\r\n  for (var i = 0; i < cookies.length; i++) {\r\n    key = cookies[i]\r\n    val = obj[key]\r\n    dec = signedCookie(val, secret)\r\n\r\n    if (val !== dec) {\r\n      ret[key] = dec\r\n      delete obj[key]\r\n    }\r\n  }\r\n\r\n  return ret\r\n}\r\n"]}