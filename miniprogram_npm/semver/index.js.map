{"version":3,"sources":["index.js","internal/re.js","internal/constants.js","internal/debug.js","classes/semver.js","internal/parse-options.js","internal/identifiers.js","functions/parse.js","functions/valid.js","functions/clean.js","functions/inc.js","functions/diff.js","functions/major.js","functions/minor.js","functions/patch.js","functions/prerelease.js","functions/compare.js","functions/rcompare.js","functions/compare-loose.js","functions/compare-build.js","functions/sort.js","functions/rsort.js","functions/gt.js","functions/lt.js","functions/eq.js","functions/neq.js","functions/gte.js","functions/lte.js","functions/cmp.js","functions/coerce.js","classes/comparator.js","classes/range.js","internal/lrucache.js","functions/satisfies.js","ranges/to-comparators.js","ranges/max-satisfying.js","ranges/min-satisfying.js","ranges/min-version.js","ranges/valid.js","ranges/outside.js","ranges/gtr.js","ranges/ltr.js","ranges/intersects.js","ranges/simplify.js","ranges/subset.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ACHA,AFMA;ADIA,AENA,ACHA,AFMA;ADIA,AENA,ACHA,AFMA;AGRA,AJYA,AENA,ACHA,AFMA;AGRA,AJYA,AENA,ACHA,AFMA;AGRA,AJYA,AENA,ACHA,AFMA;AGRA,AJYA,AENA,ACHA,AENA,AJYA;AGRA,AJYA,AENA,ACHA,AENA,AJYA;AGRA,AJYA,AENA,ACHA,AENA,AJYA;AGRA,AJYA,AENA,ACHA,AGTA,ADGA,AJYA;AGRA,AJYA,AENA,AIZA,ADGA,AJYA;AGRA,AJYA,AENA,AIZA,ADGA,AJYA;AGRA,AGTA,APqBA,AENA,AIZA,ADGA,AJYA;AGRA,AGTA,APqBA,AENA,AIZA,ADGA,AJYA;AGRA,AGTA,APqBA,AENA,AIZA,ADGA,AJYA;AGRA,AGTA,ACHA,ARwBA,AENA,AIZA,ADGA,AJYA;AGRA,AGTA,ACHA,ARwBA,AENA,AIZA,ADGA,AJYA;AGRA,AGTA,ACHA,ARwBA,AENA,AIZA,ADGA,AJYA;AGRA,AKfA,AFMA,ACHA,ARwBA,AENA,AIZA,ADGA,AJYA;AGRA,AKfA,AFMA,ACHA,ARwBA,AENA,AIZA,ADGA,AJYA;AGRA,AKfA,AFMA,ACHA,ARwBA,AENA,AIZA,ADGA,AJYA;AGRA,AKfA,ACHA,AHSA,ACHA,ARwBA,AENA,AIZA,ADGA,AJYA;AGRA,AKfA,ACHA,AHSA,APqBA,AENA,AIZA,ALeA;AGRA,AKfA,ACHA,AHSA,APqBA,AENA,AIZA,ALeA;AGRA,AKfA,AENA,ADGA,AHSA,APqBA,AENA,AIZA,ALeA;AGRA,AOrBA,ADGA,AHSA,APqBA,AENA,AIZA,ALeA;AGRA,AOrBA,ADGA,AHSA,APqBA,AENA,AIZA,ALeA;AGRA,AOrBA,ADGA,AENA,ALeA,APqBA,AENA,AIZA,ALeA;AGRA,AOrBA,ADGA,AENA,ALeA,APqBA,AENA,AIZA,ALeA;AGRA,AOrBA,ADGA,AENA,AZoCA,AENA,AIZA,ALeA;AGRA,AOrBA,ADGA,AENA,ACHA,AbuCA,AENA,AIZA,ALeA;AGRA,AOrBA,ADGA,AGTA,AbuCA,AENA,AIZA,ALeA;AGRA,AOrBA,ADGA,AGTA,AbuCA,AENA,AIZA,ALeA;AGRA,AOrBA,ADGA,AGTA,ACHA,Ad0CA,ACHA;AGRA,AOrBA,ADGA,AIZA,Ad0CA,ACHA;AGRA,AOrBA,ADGA,AIZA,Ad0CA,ACHA;AGRA,AOrBA,ADGA,AIZA,ACHA,Af6CA,ACHA;AGRA,AOrBA,ADGA,AKfA,Af6CA,ACHA;AGRA,AOrBA,ADGA,AKfA,Af6CA,ACHA;AGRA,AYpCA,ALeA,ADGA,AKfA,Af6CA,ACHA;AGRA,AYpCA,ALeA,ADGA,AKfA,Af6CA,ACHA;AGRA,AYpCA,ALeA,AIZA,Af6CA,ACHA;AGRA,AYpCA,ALeA,AIZA,AENA,AjBmDA,ACHA;AGRA,AYpCA,ALeA,AMlBA,AjBmDA,ACHA;AGRA,AYpCA,ALeA,AMlBA,AjBmDA,ACHA;AGRA,Ac1CA,APqBA,AMlBA,AjBmDA,ACHA;AGRA,Ac1CA,APqBA,AXiCA,ACHA;AGRA,Ac1CA,APqBA,AXiCA,ACHA;AGRA,Ae7CA,ADGA,APqBA,AXiCA,ACHA;AGRA,Ae7CA,ARwBA,AXiCA,ACHA;AGRA,Ae7CA,ARwBA,AXiCA,ACHA;AGRA,Ae7CA,ARwBA,AS3BA,ApB4DA,ACHA;AGRA,Ae7CA,ARwBA,AS3BA,ApB4DA,ACHA;AGRA,Ae7CA,ARwBA,AS3BA,ApB4DA,ACHA;AGRA,Ae7CA,ARwBA,AU9BA,ADGA,ApB4DA,ACHA;AGRA,Ae7CA,ARwBA,AU9BA,ArB+DA,ACHA;AGRA,AOrBA,AU9BA,ArB+DA,ACHA;AGRA,AOrBA,AWjCA,ADGA,ArB+DA,ACHA;AGRA,AOrBA,AWjCA,AtBkEA,ACHA;AGRA,AOrBA,AWjCA,AtBkEA,ACHA;AGRA,AOrBA,AWjCA,ACHA,AvBqEA,ACHA;AGRA,AOrBA,AYpCA,AvBqEA,ACHA;AGRA,AOrBA,AYpCA,AvBqEA,ACHA;AGRA,AOrBA,AavCA,ADGA,AvBqEA,ACHA;AGRA,AOrBA,AavCA,AxBwEA,ACHA;AGRA,AOrBA,AavCA,AxBwEA,ACHA;AGRA,AOrBA,AavCA,ACHA,AzB2EA,ACHA;AGRA,AOrBA,Ac1CA,AzB2EA,ACHA;AGRA,AOrBA,Ac1CA,AzB2EA,ACHA;AGRA,AOrBA,Ae7CA,ADGA,AzB2EA,ACHA;AGRA,AOrBA,Ae7CA,A1B8EA,ACHA;AGRA,AOrBA,Ae7CA,A1B8EA,ACHA;AGRA,AOrBA,Ae7CA,ACHA,A3BiFA,ACHA;AGRA,AOrBA,AgBhDA,A3BiFA,ACHA;AGRA,AOrBA,AgBhDA,A3BiFA,ACHA;AGRA,AwBxEA,AjBmDA,AgBhDA,A3BiFA,ACHA;AGRA,AwBxEA,AjBmDA,AXiCA,ACHA;AGRA,AwBxEA,AjBmDA,AXiCA,ACHA;AGRA,AwBxEA,ACHA,AlBsDA,AXiCA,ACHA;AGRA,AwBxEA,ACHA,AlBsDA,AXiCA,ACHA;AGRA,AwBxEA,ACHA,AlBsDA,AXiCA,ACHA;A6BtFA,A1B8EA,AwBxEA,ACHA,AlBsDA,AV8BA;A6BtFA,A1B8EA,AwBxEA,ACHA,AlBsDA,AV8BA;A6BtFA,A1B8EA,AwBxEA,ACHA,A5BoFA;A6BtFA,ACHA,A3BiFA,AwBxEA,ACHA,A5BoFA;A6BtFA,ACHA,A3BiFA,AwBxEA,ACHA,A5BoFA;A6BtFA,ACHA,A3BiFA,AwBxEA,ACHA,A5BoFA;A6BtFA,ACHA,A3BiFA,AwBxEA,ACHA,AGTA,A/B6FA;A6BtFA,ACHA,A3BiFA,AwBxEA,ACHA,AGTA,A/B6FA;A6BtFA,ACHA,A3BiFA,AwBxEA,ACHA,AGTA,A/B6FA;A6BtFA,ACHA,A3BiFA,AwBxEA,ACHA,AIZA,ADGA,A/B6FA;A6BtFA,ACHA,A3BiFA,AwBxEA,ACHA,AIZA,ADGA,A/B6FA;A6BtFA,ACHA,A3BiFA,AwBxEA,ACHA,AIZA,ADGA,A/B6FA;A6BtFA,ACHA,A3BiFA,AwBxEA,ACHA,AIZA,ADGA,A/B6FA,AiCnGA;AJaA,ACHA,A3BiFA,AwBxEA,ACHA,AIZA,ADGA,A/B6FA,AiCnGA;AJaA,ACHA,A3BiFA,AwBxEA,ACHA,AIZA,ADGA,A/B6FA,AiCnGA;AJaA,ACHA,A3BiFA,AwBxEA,ACHA,AIZA,ADGA,A/B6FA,AkCtGA,ADGA;AJaA,ACHA,A3BiFA,AwBxEA,ACHA,AIZA,ADGA,A/B6FA,AkCtGA,ADGA;AJaA,ACHA,A3BiFA,AwBxEA,ACHA,AIZA,ADGA,A/B6FA,AkCtGA,ADGA;AJaA,ACHA,A3BiFA,AwBxEA,ACHA,AIZA,ADGA,A/B6FA,AkCtGA,ACHA,AFMA;AJaA,ACHA,A3BiFA,AwBxEA,ACHA,AIZA,ADGA,A/B6FA,AkCtGA,ACHA,AFMA;AJaA,ACHA,A3BiFA,AwBxEA,ACHA,AGTA,A/B6FA,AkCtGA,ACHA,AFMA;AJaA,ACHA,A3BiFA,AwBxEA,ACHA,AGTA,A/B6FA,AkCtGA,ACHA,ACHA;APsBA,ACHA,A3BiFA,AwBxEA,ACHA,AGTA,A/B6FA,AkCtGA,ACHA,ACHA;APsBA,ACHA,A3BiFA,AwBxEA,ACHA,AGTA,A/B6FA,AkCtGA,ACHA,ACHA;APsBA,ACHA,A3BiFA,AwBxEA,ACHA,AGTA,A/B6FA,AkCtGA,ACHA,ACHA,ACHA;ARyBA,ACHA,A3BiFA,AwBxEA,ACHA,AGTA,A/B6FA,AkCtGA,ACHA,ACHA,ACHA;ARyBA,ACHA,A3BiFA,AwBxEA,ACHA,AGTA,A/B6FA,AkCtGA,ACHA,ACHA,ACHA;ARyBA,ACHA,A3BiFA,AwBxEA,ACHA,AGTA,A/B6FA,AkCtGA,ACHA,ACHA,AENA,ADGA;ARyBA,ACHA,A3BiFA,AwBxEA,ACHA,AGTA,A/B6FA,AkCtGA,ACHA,ACHA,AENA,ADGA;ARyBA,ACHA,A3BiFA,AwBxEA,ACHA,AGTA,A/B6FA,AkCtGA,ACHA,ACHA,AENA,ADGA;ARyBA,ACHA,A3BiFA,AwBxEA,ACHA,AGTA,A/B6FA,AuCrHA,ALeA,ACHA,ACHA,AENA,ADGA;ARyBA,ACHA,A3BiFA,AwBxEA,ACHA,AGTA,A/B6FA,AuCrHA,ALeA,ACHA,ACHA,AENA,ADGA;ARyBA,ACHA,A3BiFA,AwBxEA,ACHA,AGTA,A/B6FA,AuCrHA,ALeA,ACHA,ACHA,AENA,ADGA;ARyBA,ACHA,A3BiFA,AwBxEA,ACHA,AGTA,A/B6FA,AuCrHA,ACHA,ANkBA,ACHA,ACHA,AENA,ADGA;ARyBA,ACHA,A3BiFA,AwBxEA,ACHA,AGTA,A/B6FA,AuCrHA,ACHA,ANkBA,ACHA,ACHA,AENA,ADGA;ARyBA,ACHA,A3BiFA,AwBxEA,ACHA,AGTA,A/B6FA,AwCxHA,ANkBA,ACHA,ACHA,AENA,ADGA;ARyBA,ACHA,A3BiFA,AwBxEA,ACHA,AGTA,A/B6FA,AyC3HA,ADGA,ANkBA,ACHA,ACHA,AENA;AT4BA,ACHA,A3BiFA,AwBxEA,ACHA,AGTA,A/B6FA,AyC3HA,ADGA,ANkBA,ACHA,ACHA,AENA;AT4BA,ACHA,A3BiFA,AwBxEA,ACHA,AGTA,A/B6FA,AyC3HA,APqBA,ACHA,ACHA,AENA;AT4BA,ACHA,A3BiFA,AwBxEA,ACHA,AGTA,A/B6FA,AyC3HA,APqBA,ACHA,ACHA,AENA,AIZA;AbwCA,ACHA,A3BiFA,AwBxEA,ACHA,AGTA,A/B6FA,AyC3HA,APqBA,ACHA,ACHA,AENA,AIZA;AbwCA,ACHA,A3BiFA,AwBxEA,ACHA,AGTA,A/B6FA,AyC3HA,ANkBA,ACHA,AENA,AIZA;AbwCA,ACHA,A3BiFA,AwBxEA,ACHA,AGTA,A/B6FA,AyC3HA,ANkBA,ACHA,AENA,AIZA,ACHA;Ad2CA,ACHA,A3BiFA,AwBxEA,ACHA,AGTA,A/B6FA,AyC3HA,ALeA,AENA,AIZA,ACHA;Ad2CA,ACHA,A3BiFA,AwBxEA,ACHA,AGTA,A/B6FA,AoC5GA,AENA,AIZA,ACHA;Ad2CA,ACHA,A3BiFA,AwBxEA,ACHA,AGTA,A/B6FA,AoC5GA,AENA,AIZA,ACHA;Ad2CA,ACHA,A3BiFA,AwBxEA,ACHA,AGTA,A/B6FA,AoC5GA,AENA,AIZA,ACHA;Ad2CA,ACHA,A3BiFA,AyB3EA,A5BoFA,AoC5GA,AENA,AIZA,ACHA;Ad2CA,ACHA,A3BiFA,AyB3EA,A5BoFA,AoC5GA,AENA,AIZA,ACHA;Ad2CA,ACHA,A3BiFA,AyB3EA,A5BoFA,AoC5GA,AENA,AIZA,ACHA;Ad2CA,ACHA,A3BiFA,AyB3EA,A5BoFA,AoC5GA,AENA,AIZA,ACHA;Ad2CA,ACHA,A3BiFA,AyB3EA,A5BoFA,AoC5GA,AENA,AIZA,ACHA;Ad2CA,ACHA,A3BiFA,AyB3EA,A5BoFA,AoC5GA,AENA,AIZA,ACHA;Ad2CA,ACHA,A3BiFA,AyB3EA,A5BoFA,AoC5GA,AENA,AIZA,ACHA;Ad2CA,ACHA,A3BiFA,AyB3EA,A5BoFA,AoC5GA,AENA,AIZA,ACHA;Ad2CA,ACHA,A3BiFA,AyB3EA,A5BoFA,AoC5GA,AENA,AIZA,ACHA;Ad2CA,ACHA,A3BiFA,AyB3EA,A5BoFA,AoC5GA,AENA,AIZA,ACHA;Ad2CA,ACHA,A3BiFA,AyB3EA,A5BoFA,AoC5GA,AENA,AIZA,ACHA;Ad2CA,ACHA,A3BiFA,AHSA,AoC5GA,AENA,AIZA,ACHA;Ad2CA,ACHA,A3BiFA,AHSA,AoC5GA,AENA,AIZA,ACHA;Ad2CA,ACHA,A3BiFA,AHSA,AoC5GA,AENA,AIZA,ACHA;Ad2CA,ACHA,A3BiFA,AHSA,AoC5GA,AENA,AIZA,ACHA;Ad2CA,ACHA,A3BiFA,AHSA,AoC5GA,AENA,AIZA,ACHA;Ad2CA,ACHA,A3BiFA,AHSA,AoC5GA,AENA,AIZA,ACHA;Ad2CA,ACHA,A3BiFA,AHSA,AoC5GA,AENA,AIZA,ACHA;Ad2CA,ACHA,A3BiFA,AHSA,AoC5GA,AENA,AIZA,ACHA;Ad2CA,ACHA,A3BiFA,AHSA,AoC5GA,AENA,AIZA,ACHA;Ad2CA,ACHA,A3BiFA,AHSA,AoC5GA,AENA,AIZA,ACHA;Ad2CA,ACHA,A3BiFA,AHSA,AoC5GA,AENA,AIZA,ACHA;Ad2CA,ACHA,A3BiFA,AHSA,AoC5GA,AENA,AIZA,ACHA;Ad2CA,ACHA,A3BiFA,AHSA,AoC5GA,AENA,AIZA,ACHA;Ad2CA,ACHA,A3BiFA,AHSA,AoC5GA,AENA,AIZA,ACHA;Ad2CA,ACHA,A3BiFA,AHSA,AoC5GA,AENA,AIZA,ACHA;Ad2CA,ACHA,A3BiFA,AHSA,AoC5GA,AENA,AIZA,ACHA;Ad2CA,ACHA,A3BiFA,AHSA,AoC5GA,AENA,AIZA,ACHA;Ad2CA,ACHA,A3BiFA,AHSA,AoC5GA,AENA,AIZA,ACHA;Ad2CA,ACHA,A3BiFA,AHSA,AoC5GA,AENA,AIZA,ACHA;Ad2CA,ACHA,A3BiFA,AHSA,AoC5GA,AENA,AIZA,ACHA;Ad2CA,ACHA,A3BiFA,AHSA,AoC5GA,AENA,AIZA,ACHA;Ad2CA,ACHA,A3BiFA,AHSA,AoC5GA,AENA,AIZA,ACHA;Ad2CA,ACHA,A3BiFA,AHSA,AoC5GA,AENA,AIZA,ACHA;Ad2CA,ACHA,A3BiFA,AHSA,AoC5GA,AENA,AIZA,ACHA;Ad2CA,ACHA,A3BiFA,AHSA,AoC5GA,AENA,AIZA,ACHA;Ad2CA,ACHA,A3BiFA,AHSA,AsClHA,AIZA,ACHA;Ad2CA,ACHA,A3BiFA,AHSA,AsClHA,AIZA,ACHA;Ad2CA,ACHA,A3BiFA,AHSA,AsClHA,AIZA,ACHA;Ad2CA,ACHA,A3BiFA,AHSA,AsClHA,AIZA,ACHA;Ad2CA,ACHA,A3BiFA,AHSA,AsClHA,AKfA;Ad2CA,ACHA,A3BiFA,AHSA,AsClHA,AKfA;Ad2CA,ACHA,A3BiFA,AHSA,AsClHA,AKfA;Ad2CA,ACHA,A3BiFA,AHSA,AsClHA,AKfA;Ad2CA,ACHA,A3BiFA,AHSA,AsClHA,AKfA;Ad2CA,ACHA,A3BiFA,AHSA,AsClHA,AKfA;Ad2CA,ACHA,A3BiFA,AHSA,AsClHA,AKfA;Ad2CA,ACHA,A3BiFA,AHSA,AsClHA,AKfA;Ad2CA,ACHA,A3BiFA,AHSA,AsClHA,AKfA;Ad2CA,ACHA,A3BiFA,AHSA,AsClHA,AKfA;Ad2CA,ACHA,A3BiFA,AHSA,AsClHA,AKfA;Ad2CA,ACHA,A3BiFA,AHSA,AsClHA,AKfA;Ad2CA,ACHA,A3BiFA,AHSA,AsClHA,AKfA;Ad2CA,ACHA,A3BiFA,AHSA,AsClHA,AKfA;Ad2CA,ACHA,A3BiFA,AHSA,AsClHA,AKfA;Ad2CA,ACHA,A3BiFA,AHSA,AsClHA,AKfA;Ad2CA,ACHA,A3BiFA,AHSA,AsClHA,AKfA;Ad2CA,ACHA,A3BiFA,AHSA,AsClHA,AKfA;Ad2CA,ACHA,A3BiFA,AHSA,AsClHA,AKfA;Ad2CA,ACHA,A3BiFA,AHSA,AsClHA,AKfA;Ad2CA,ACHA,A3BiFA,AHSA,AsClHA,AKfA;Ad2CA,ACHA,A3BiFA,AHSA,A2CjIA;Ad2CA,ACHA,A3BiFA,AHSA,A2CjIA;Ad2CA,ACHA,A3BiFA,AHSA,A2CjIA;Ad2CA,ACHA,A3BiFA,AHSA,A2CjIA;Ad2CA,ACHA,A3BiFA,AHSA,A2CjIA;Ad2CA,ACHA,A3BiFA,AHSA,A2CjIA;Ad2CA,ACHA,A3BiFA,AHSA,A2CjIA;Ad2CA,ACHA,A3BiFA,AHSA,A2CjIA;Ad2CA,ACHA,A3BiFA,AHSA,A2CjIA;Ad2CA,ACHA,A3BiFA,AHSA,A2CjIA;Ad2CA,ACHA,A3BiFA,AHSA,A2CjIA;Ad2CA,ACHA,A3BiFA,AHSA,A2CjIA;Ad2CA,ACHA,A3BiFA,AHSA,A2CjIA;Ad2CA,ACHA,A3BiFA,AHSA,A2CjIA;Ad2CA,ACHA,A3BiFA,AHSA,A2CjIA;Ad2CA,ACHA,A3BiFA,AHSA,A2CjIA;Ad2CA,ACHA,A3BiFA,AHSA,A2CjIA;Ad2CA,ACHA,A3BiFA,AHSA,A2CjIA;Ad2CA,ACHA,A3BiFA,AHSA,A2CjIA;Ad2CA,ACHA,A3BiFA,AHSA,A2CjIA;Ad2CA,ACHA,A3BiFA,AHSA,A2CjIA;Ad2CA,ACHA,A3BiFA,AHSA,A2CjIA;Ad2CA,ACHA,A3BiFA,AHSA,A2CjIA;Ad2CA,ACHA,A3BiFA,AHSA,A2CjIA;Ad2CA,ACHA,A3BiFA,AHSA,A2CjIA;Ad2CA,ACHA,A3BiFA,AwCxHA;Ad2CA,ACHA,A3BiFA,AwCxHA;Ad2CA,ACHA,A3BiFA,AwCxHA;Ad2CA,ACHA,A3BiFA,AwCxHA;Ad2CA,ACHA,A3BiFA,AwCxHA;Ad2CA,ACHA,A3BiFA,AwCxHA;Ad2CA,ACHA,A3BiFA,AwCxHA;Ad2CA,ACHA,A3BiFA,AwCxHA;Ad2CA,ACHA,A3BiFA,AwCxHA;AbwCA,A3BiFA,AwCxHA;AbwCA,A3BiFA,AwCxHA;AbwCA,A3BiFA,AwCxHA;AbwCA,A3BiFA,AwCxHA;AbwCA,A3BiFA,AwCxHA;AbwCA,A3BiFA,AwCxHA;AbwCA,A3BiFA,AwCxHA;AbwCA,A3BiFA,AwCxHA;AbwCA,A3BiFA,AwCxHA;AbwCA,A3BiFA,AwCxHA;AbwCA,A3BiFA,AwCxHA;AbwCA,A3BiFA,AwCxHA;AbwCA,A3BiFA,AwCxHA;AbwCA,A3BiFA,AwCxHA;AbwCA,A3BiFA,AwCxHA;AbwCA,A3BiFA,AwCxHA;AbwCA,A3BiFA,AwCxHA;AbwCA,A3BiFA,AwCxHA;AbwCA,A3BiFA,AwCxHA;AbwCA,A3BiFA,AwCxHA;AbwCA,A3BiFA,AwCxHA;AbwCA,A3BiFA,AwCxHA;AbwCA,A3BiFA,AwCxHA;AbwCA,A3BiFA,AwCxHA;AbwCA,A3BiFA,AwCxHA;AbwCA,A3BiFA,AwCxHA;AbwCA,A3BiFA,AwCxHA;AbwCA,A3BiFA,AwCxHA;AbwCA,A3BiFA,AwCxHA;AbwCA,A3BiFA,AwCxHA;AbwCA,A3BiFA,AwCxHA;AbwCA,A3BiFA,AwCxHA;AbwCA,A3BiFA,AwCxHA;AbwCA,A3BiFA,AwCxHA;AbwCA,A3BiFA,AwCxHA;AbwCA,A3BiFA,AwCxHA;AbwCA,A3BiFA,AwCxHA;AbwCA,A3BiFA,AwCxHA;AbwCA,A3BiFA,AwCxHA;AbwCA,A3BiFA,AwCxHA;AbwCA,A3BiFA,AwCxHA;AbwCA,A3BiFA,AwCxHA;AbwCA,A3BiFA,AwCxHA;AbwCA,A3BiFA,AwCxHA;AbwCA,A3BiFA,AwCxHA;AbwCA,A3BiFA,AwCxHA;AbwCA,A3BiFA,AwCxHA;AbwCA,A3BiFA,AwCxHA;AbwCA,A3BiFA,AwCxHA;AbwCA,A3BiFA,AwCxHA;AbwCA,A3BiFA,AwCxHA;AbwCA,A3BiFA,AwCxHA;AbwCA,A3BiFA,AwCxHA;AbwCA,A3BiFA,AwCxHA;AbwCA,A3BiFA,AwCxHA;AbwCA,A3BiFA,AwCxHA;AbwCA,A3BiFA,AwCxHA;AbwCA,A3BiFA,AwCxHA;AbwCA,A3BiFA,AwCxHA;AbwCA,A3BiFA,AwCxHA;AbwCA,A3BiFA,AwCxHA;AbwCA,A3BiFA,AwCxHA;AbwCA,A3BiFA,AwCxHA;AbwCA,A3BiFA,AwCxHA;AbwCA,A3BiFA,AwCxHA;AbwCA,A3BiFA,AwCxHA;AbwCA,A3BiFA,AwCxHA;AbwCA,A3BiFA,AwCxHA;AbwCA,A3BiFA,AwCxHA;AbwCA,A3BiFA,AwCxHA;AbwCA,A3BiFA,AwCxHA;AbwCA,A3BiFA,AwCxHA;AbwCA,A3BiFA,AwCxHA;AbwCA,A3BiFA,AwCxHA;AbwCA,A3BiFA,AwCxHA;AbwCA,A3BiFA,AwCxHA;AbwCA,A3BiFA,AwCxHA;AbwCA,A3BiFA,AwCxHA;AbwCA,A3BiFA,AwCxHA;AbwCA,A3BiFA,AwCxHA;AbwCA,A3BiFA,AwCxHA;AbwCA,A3BiFA,AwCxHA;AbwCA,A3BiFA,AwCxHA;AbwCA,A3BiFA,AwCxHA;AbwCA,A3BiFA,AwCxHA;AbwCA,A3BiFA,AwCxHA;AbwCA,A3BiFA,AwCxHA;AbwCA,A3BiFA,AwCxHA;AbwCA,A3BiFA,AwCxHA;AbwCA,A3BiFA,AwCxHA;AbwCA,A3BiFA,AwCxHA;AbwCA,A3BiFA,AwCxHA;AbwCA,A3BiFA,AwCxHA;AbwCA,A3BiFA,AwCxHA;AbwCA,A3BiFA,AwCxHA;AbwCA,A3BiFA,AwCxHA;AbwCA,A3BiFA,AwCxHA;AbwCA,A3BiFA,AwCxHA;AbwCA,A3BiFA,AwCxHA;AbwCA,AavCA;AbwCA,AavCA;AbwCA,AavCA;AbwCA,AavCA;AbwCA,AavCA;AbwCA,AavCA;AbwCA,AavCA;AbwCA,AavCA;AbwCA,AavCA;AbwCA,AavCA;AbwCA,AavCA;AbwCA,AavCA;AbwCA,AavCA;AbwCA,AavCA;AbwCA,AavCA;AbwCA,AavCA;AbwCA,AavCA;AbwCA,AavCA;AbwCA,AavCA;AbwCA,AavCA;AbwCA,AavCA;AbwCA,AavCA;AbwCA,AavCA;AbwCA,AavCA;AbwCA,AavCA;AbwCA,AavCA;AbwCA,AavCA;AbwCA,AavCA;AbwCA,AavCA;AbwCA,AavCA;AbwCA,AavCA;AbwCA,AavCA;AbwCA,AavCA;AbwCA,AavCA;AbwCA,AavCA;AbwCA,AavCA;AbwCA,AavCA;AbwCA,AavCA;AbwCA,AavCA;AbwCA,AavCA;AbwCA,AavCA;AbwCA,AavCA;AbwCA,AavCA;AbwCA,AavCA;AbwCA,AavCA;AbwCA,AavCA;AbwCA,AavCA;AbwCA,AavCA;AbwCA,AavCA;AbwCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["// just pre-load all the stuff that index.js lazily exports\r\nconst internalRe = require('./internal/re')\r\nconst constants = require('./internal/constants')\r\nconst SemVer = require('./classes/semver')\r\nconst identifiers = require('./internal/identifiers')\r\nconst parse = require('./functions/parse')\r\nconst valid = require('./functions/valid')\r\nconst clean = require('./functions/clean')\r\nconst inc = require('./functions/inc')\r\nconst diff = require('./functions/diff')\r\nconst major = require('./functions/major')\r\nconst minor = require('./functions/minor')\r\nconst patch = require('./functions/patch')\r\nconst prerelease = require('./functions/prerelease')\r\nconst compare = require('./functions/compare')\r\nconst rcompare = require('./functions/rcompare')\r\nconst compareLoose = require('./functions/compare-loose')\r\nconst compareBuild = require('./functions/compare-build')\r\nconst sort = require('./functions/sort')\r\nconst rsort = require('./functions/rsort')\r\nconst gt = require('./functions/gt')\r\nconst lt = require('./functions/lt')\r\nconst eq = require('./functions/eq')\r\nconst neq = require('./functions/neq')\r\nconst gte = require('./functions/gte')\r\nconst lte = require('./functions/lte')\r\nconst cmp = require('./functions/cmp')\r\nconst coerce = require('./functions/coerce')\r\nconst Comparator = require('./classes/comparator')\r\nconst Range = require('./classes/range')\r\nconst satisfies = require('./functions/satisfies')\r\nconst toComparators = require('./ranges/to-comparators')\r\nconst maxSatisfying = require('./ranges/max-satisfying')\r\nconst minSatisfying = require('./ranges/min-satisfying')\r\nconst minVersion = require('./ranges/min-version')\r\nconst validRange = require('./ranges/valid')\r\nconst outside = require('./ranges/outside')\r\nconst gtr = require('./ranges/gtr')\r\nconst ltr = require('./ranges/ltr')\r\nconst intersects = require('./ranges/intersects')\r\nconst simplifyRange = require('./ranges/simplify')\r\nconst subset = require('./ranges/subset')\r\nmodule.exports = {\r\n  parse,\r\n  valid,\r\n  clean,\r\n  inc,\r\n  diff,\r\n  major,\r\n  minor,\r\n  patch,\r\n  prerelease,\r\n  compare,\r\n  rcompare,\r\n  compareLoose,\r\n  compareBuild,\r\n  sort,\r\n  rsort,\r\n  gt,\r\n  lt,\r\n  eq,\r\n  neq,\r\n  gte,\r\n  lte,\r\n  cmp,\r\n  coerce,\r\n  Comparator,\r\n  Range,\r\n  satisfies,\r\n  toComparators,\r\n  maxSatisfying,\r\n  minSatisfying,\r\n  minVersion,\r\n  validRange,\r\n  outside,\r\n  gtr,\r\n  ltr,\r\n  intersects,\r\n  simplifyRange,\r\n  subset,\r\n  SemVer,\r\n  re: internalRe.re,\r\n  src: internalRe.src,\r\n  tokens: internalRe.t,\r\n  SEMVER_SPEC_VERSION: constants.SEMVER_SPEC_VERSION,\r\n  RELEASE_TYPES: constants.RELEASE_TYPES,\r\n  compareIdentifiers: identifiers.compareIdentifiers,\r\n  rcompareIdentifiers: identifiers.rcompareIdentifiers,\r\n}\r\n","const {\r\n  MAX_SAFE_COMPONENT_LENGTH,\r\n  MAX_SAFE_BUILD_LENGTH,\r\n  MAX_LENGTH,\r\n} = require('./constants')\r\nconst debug = require('./debug')\r\nexports = module.exports = {}\r\n\r\n// The actual regexps go on exports.re\r\nconst re = exports.re = []\r\nconst safeRe = exports.safeRe = []\r\nconst src = exports.src = []\r\nconst safeSrc = exports.safeSrc = []\r\nconst t = exports.t = {}\r\nlet R = 0\r\n\r\nconst LETTERDASHNUMBER = '[a-zA-Z0-9-]'\r\n\r\n// Replace some greedy regex tokens to prevent regex dos issues. These regex are\r\n// used internally via the safeRe object since all inputs in this library get\r\n// normalized first to trim and collapse all extra whitespace. The original\r\n// regexes are exported for userland consumption and lower level usage. A\r\n// future breaking change could export the safer regex only with a note that\r\n// all input should have extra whitespace removed.\r\nconst safeRegexReplacements = [\r\n  ['\\\\s', 1],\r\n  ['\\\\d', MAX_LENGTH],\r\n  [LETTERDASHNUMBER, MAX_SAFE_BUILD_LENGTH],\r\n]\r\n\r\nconst makeSafeRegex = (value) => {\r\n  for (const [token, max] of safeRegexReplacements) {\r\n    value = value\r\n      .split(`${token}*`).join(`${token}{0,${max}}`)\r\n      .split(`${token}+`).join(`${token}{1,${max}}`)\r\n  }\r\n  return value\r\n}\r\n\r\nconst createToken = (name, value, isGlobal) => {\r\n  const safe = makeSafeRegex(value)\r\n  const index = R++\r\n  debug(name, index, value)\r\n  t[name] = index\r\n  src[index] = value\r\n  safeSrc[index] = safe\r\n  re[index] = new RegExp(value, isGlobal ? 'g' : undefined)\r\n  safeRe[index] = new RegExp(safe, isGlobal ? 'g' : undefined)\r\n}\r\n\r\n// The following Regular Expressions can be used for tokenizing,\r\n// validating, and parsing SemVer version strings.\r\n\r\n// ## Numeric Identifier\r\n// A single `0`, or a non-zero digit followed by zero or more digits.\r\n\r\ncreateToken('NUMERICIDENTIFIER', '0|[1-9]\\\\d*')\r\ncreateToken('NUMERICIDENTIFIERLOOSE', '\\\\d+')\r\n\r\n// ## Non-numeric Identifier\r\n// Zero or more digits, followed by a letter or hyphen, and then zero or\r\n// more letters, digits, or hyphens.\r\n\r\ncreateToken('NONNUMERICIDENTIFIER', `\\\\d*[a-zA-Z-]${LETTERDASHNUMBER}*`)\r\n\r\n// ## Main Version\r\n// Three dot-separated numeric identifiers.\r\n\r\ncreateToken('MAINVERSION', `(${src[t.NUMERICIDENTIFIER]})\\\\.` +\r\n                   `(${src[t.NUMERICIDENTIFIER]})\\\\.` +\r\n                   `(${src[t.NUMERICIDENTIFIER]})`)\r\n\r\ncreateToken('MAINVERSIONLOOSE', `(${src[t.NUMERICIDENTIFIERLOOSE]})\\\\.` +\r\n                        `(${src[t.NUMERICIDENTIFIERLOOSE]})\\\\.` +\r\n                        `(${src[t.NUMERICIDENTIFIERLOOSE]})`)\r\n\r\n// ## Pre-release Version Identifier\r\n// A numeric identifier, or a non-numeric identifier.\r\n\r\ncreateToken('PRERELEASEIDENTIFIER', `(?:${src[t.NUMERICIDENTIFIER]\r\n}|${src[t.NONNUMERICIDENTIFIER]})`)\r\n\r\ncreateToken('PRERELEASEIDENTIFIERLOOSE', `(?:${src[t.NUMERICIDENTIFIERLOOSE]\r\n}|${src[t.NONNUMERICIDENTIFIER]})`)\r\n\r\n// ## Pre-release Version\r\n// Hyphen, followed by one or more dot-separated pre-release version\r\n// identifiers.\r\n\r\ncreateToken('PRERELEASE', `(?:-(${src[t.PRERELEASEIDENTIFIER]\r\n}(?:\\\\.${src[t.PRERELEASEIDENTIFIER]})*))`)\r\n\r\ncreateToken('PRERELEASELOOSE', `(?:-?(${src[t.PRERELEASEIDENTIFIERLOOSE]\r\n}(?:\\\\.${src[t.PRERELEASEIDENTIFIERLOOSE]})*))`)\r\n\r\n// ## Build Metadata Identifier\r\n// Any combination of digits, letters, or hyphens.\r\n\r\ncreateToken('BUILDIDENTIFIER', `${LETTERDASHNUMBER}+`)\r\n\r\n// ## Build Metadata\r\n// Plus sign, followed by one or more period-separated build metadata\r\n// identifiers.\r\n\r\ncreateToken('BUILD', `(?:\\\\+(${src[t.BUILDIDENTIFIER]\r\n}(?:\\\\.${src[t.BUILDIDENTIFIER]})*))`)\r\n\r\n// ## Full Version String\r\n// A main version, followed optionally by a pre-release version and\r\n// build metadata.\r\n\r\n// Note that the only major, minor, patch, and pre-release sections of\r\n// the version string are capturing groups.  The build metadata is not a\r\n// capturing group, because it should not ever be used in version\r\n// comparison.\r\n\r\ncreateToken('FULLPLAIN', `v?${src[t.MAINVERSION]\r\n}${src[t.PRERELEASE]}?${\r\n  src[t.BUILD]}?`)\r\n\r\ncreateToken('FULL', `^${src[t.FULLPLAIN]}$`)\r\n\r\n// like full, but allows v1.2.3 and =1.2.3, which people do sometimes.\r\n// also, 1.0.0alpha1 (prerelease without the hyphen) which is pretty\r\n// common in the npm registry.\r\ncreateToken('LOOSEPLAIN', `[v=\\\\s]*${src[t.MAINVERSIONLOOSE]\r\n}${src[t.PRERELEASELOOSE]}?${\r\n  src[t.BUILD]}?`)\r\n\r\ncreateToken('LOOSE', `^${src[t.LOOSEPLAIN]}$`)\r\n\r\ncreateToken('GTLT', '((?:<|>)?=?)')\r\n\r\n// Something like \"2.*\" or \"1.2.x\".\r\n// Note that \"x.x\" is a valid xRange identifer, meaning \"any version\"\r\n// Only the first item is strictly required.\r\ncreateToken('XRANGEIDENTIFIERLOOSE', `${src[t.NUMERICIDENTIFIERLOOSE]}|x|X|\\\\*`)\r\ncreateToken('XRANGEIDENTIFIER', `${src[t.NUMERICIDENTIFIER]}|x|X|\\\\*`)\r\n\r\ncreateToken('XRANGEPLAIN', `[v=\\\\s]*(${src[t.XRANGEIDENTIFIER]})` +\r\n                   `(?:\\\\.(${src[t.XRANGEIDENTIFIER]})` +\r\n                   `(?:\\\\.(${src[t.XRANGEIDENTIFIER]})` +\r\n                   `(?:${src[t.PRERELEASE]})?${\r\n                     src[t.BUILD]}?` +\r\n                   `)?)?`)\r\n\r\ncreateToken('XRANGEPLAINLOOSE', `[v=\\\\s]*(${src[t.XRANGEIDENTIFIERLOOSE]})` +\r\n                        `(?:\\\\.(${src[t.XRANGEIDENTIFIERLOOSE]})` +\r\n                        `(?:\\\\.(${src[t.XRANGEIDENTIFIERLOOSE]})` +\r\n                        `(?:${src[t.PRERELEASELOOSE]})?${\r\n                          src[t.BUILD]}?` +\r\n                        `)?)?`)\r\n\r\ncreateToken('XRANGE', `^${src[t.GTLT]}\\\\s*${src[t.XRANGEPLAIN]}$`)\r\ncreateToken('XRANGELOOSE', `^${src[t.GTLT]}\\\\s*${src[t.XRANGEPLAINLOOSE]}$`)\r\n\r\n// Coercion.\r\n// Extract anything that could conceivably be a part of a valid semver\r\ncreateToken('COERCEPLAIN', `${'(^|[^\\\\d])' +\r\n              '(\\\\d{1,'}${MAX_SAFE_COMPONENT_LENGTH}})` +\r\n              `(?:\\\\.(\\\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?` +\r\n              `(?:\\\\.(\\\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?`)\r\ncreateToken('COERCE', `${src[t.COERCEPLAIN]}(?:$|[^\\\\d])`)\r\ncreateToken('COERCEFULL', src[t.COERCEPLAIN] +\r\n              `(?:${src[t.PRERELEASE]})?` +\r\n              `(?:${src[t.BUILD]})?` +\r\n              `(?:$|[^\\\\d])`)\r\ncreateToken('COERCERTL', src[t.COERCE], true)\r\ncreateToken('COERCERTLFULL', src[t.COERCEFULL], true)\r\n\r\n// Tilde ranges.\r\n// Meaning is \"reasonably at or greater than\"\r\ncreateToken('LONETILDE', '(?:~>?)')\r\n\r\ncreateToken('TILDETRIM', `(\\\\s*)${src[t.LONETILDE]}\\\\s+`, true)\r\nexports.tildeTrimReplace = '$1~'\r\n\r\ncreateToken('TILDE', `^${src[t.LONETILDE]}${src[t.XRANGEPLAIN]}$`)\r\ncreateToken('TILDELOOSE', `^${src[t.LONETILDE]}${src[t.XRANGEPLAINLOOSE]}$`)\r\n\r\n// Caret ranges.\r\n// Meaning is \"at least and backwards compatible with\"\r\ncreateToken('LONECARET', '(?:\\\\^)')\r\n\r\ncreateToken('CARETTRIM', `(\\\\s*)${src[t.LONECARET]}\\\\s+`, true)\r\nexports.caretTrimReplace = '$1^'\r\n\r\ncreateToken('CARET', `^${src[t.LONECARET]}${src[t.XRANGEPLAIN]}$`)\r\ncreateToken('CARETLOOSE', `^${src[t.LONECARET]}${src[t.XRANGEPLAINLOOSE]}$`)\r\n\r\n// A simple gt/lt/eq thing, or just \"\" to indicate \"any version\"\r\ncreateToken('COMPARATORLOOSE', `^${src[t.GTLT]}\\\\s*(${src[t.LOOSEPLAIN]})$|^$`)\r\ncreateToken('COMPARATOR', `^${src[t.GTLT]}\\\\s*(${src[t.FULLPLAIN]})$|^$`)\r\n\r\n// An expression to strip any whitespace between the gtlt and the thing\r\n// it modifies, so that `> 1.2.3` ==> `>1.2.3`\r\ncreateToken('COMPARATORTRIM', `(\\\\s*)${src[t.GTLT]\r\n}\\\\s*(${src[t.LOOSEPLAIN]}|${src[t.XRANGEPLAIN]})`, true)\r\nexports.comparatorTrimReplace = '$1$2$3'\r\n\r\n// Something like `1.2.3 - 1.2.4`\r\n// Note that these all use the loose form, because they'll be\r\n// checked against either the strict or loose comparator form\r\n// later.\r\ncreateToken('HYPHENRANGE', `^\\\\s*(${src[t.XRANGEPLAIN]})` +\r\n                   `\\\\s+-\\\\s+` +\r\n                   `(${src[t.XRANGEPLAIN]})` +\r\n                   `\\\\s*$`)\r\n\r\ncreateToken('HYPHENRANGELOOSE', `^\\\\s*(${src[t.XRANGEPLAINLOOSE]})` +\r\n                        `\\\\s+-\\\\s+` +\r\n                        `(${src[t.XRANGEPLAINLOOSE]})` +\r\n                        `\\\\s*$`)\r\n\r\n// Star ranges basically just allow anything at all.\r\ncreateToken('STAR', '(<|>)?=?\\\\s*\\\\*')\r\n// >=0.0.0 is like a star\r\ncreateToken('GTE0', '^\\\\s*>=\\\\s*0\\\\.0\\\\.0\\\\s*$')\r\ncreateToken('GTE0PRE', '^\\\\s*>=\\\\s*0\\\\.0\\\\.0-0\\\\s*$')\r\n","// Note: this is the semver.org version of the spec that it implements\r\n// Not necessarily the package version of this code.\r\nconst SEMVER_SPEC_VERSION = '2.0.0'\r\n\r\nconst MAX_LENGTH = 256\r\nconst MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER ||\r\n/* istanbul ignore next */ 9007199254740991\r\n\r\n// Max safe segment length for coercion.\r\nconst MAX_SAFE_COMPONENT_LENGTH = 16\r\n\r\n// Max safe length for a build identifier. The max length minus 6 characters for\r\n// the shortest version with a build 0.0.0+BUILD.\r\nconst MAX_SAFE_BUILD_LENGTH = MAX_LENGTH - 6\r\n\r\nconst RELEASE_TYPES = [\r\n  'major',\r\n  'premajor',\r\n  'minor',\r\n  'preminor',\r\n  'patch',\r\n  'prepatch',\r\n  'prerelease',\r\n]\r\n\r\nmodule.exports = {\r\n  MAX_LENGTH,\r\n  MAX_SAFE_COMPONENT_LENGTH,\r\n  MAX_SAFE_BUILD_LENGTH,\r\n  MAX_SAFE_INTEGER,\r\n  RELEASE_TYPES,\r\n  SEMVER_SPEC_VERSION,\r\n  FLAG_INCLUDE_PRERELEASE: 0b001,\r\n  FLAG_LOOSE: 0b010,\r\n}\r\n","const debug = (\r\n  typeof process === 'object' &&\r\n  process.env &&\r\n  process.env.NODE_DEBUG &&\r\n  /\\bsemver\\b/i.test(process.env.NODE_DEBUG)\r\n) ? (...args) => console.error('SEMVER', ...args)\r\n  : () => {}\r\n\r\nmodule.exports = debug\r\n","const debug = require('../internal/debug')\r\nconst { MAX_LENGTH, MAX_SAFE_INTEGER } = require('../internal/constants')\r\nconst { safeRe: re, safeSrc: src, t } = require('../internal/re')\r\n\r\nconst parseOptions = require('../internal/parse-options')\r\nconst { compareIdentifiers } = require('../internal/identifiers')\r\nclass SemVer {\r\n  constructor (version, options) {\r\n    options = parseOptions(options)\r\n\r\n    if (version instanceof SemVer) {\r\n      if (version.loose === !!options.loose &&\r\n        version.includePrerelease === !!options.includePrerelease) {\r\n        return version\r\n      } else {\r\n        version = version.version\r\n      }\r\n    } else if (typeof version !== 'string') {\r\n      throw new TypeError(`Invalid version. Must be a string. Got type \"${typeof version}\".`)\r\n    }\r\n\r\n    if (version.length > MAX_LENGTH) {\r\n      throw new TypeError(\r\n        `version is longer than ${MAX_LENGTH} characters`\r\n      )\r\n    }\r\n\r\n    debug('SemVer', version, options)\r\n    this.options = options\r\n    this.loose = !!options.loose\r\n    // this isn't actually relevant for versions, but keep it so that we\r\n    // don't run into trouble passing this.options around.\r\n    this.includePrerelease = !!options.includePrerelease\r\n\r\n    const m = version.trim().match(options.loose ? re[t.LOOSE] : re[t.FULL])\r\n\r\n    if (!m) {\r\n      throw new TypeError(`Invalid Version: ${version}`)\r\n    }\r\n\r\n    this.raw = version\r\n\r\n    // these are actually numbers\r\n    this.major = +m[1]\r\n    this.minor = +m[2]\r\n    this.patch = +m[3]\r\n\r\n    if (this.major > MAX_SAFE_INTEGER || this.major < 0) {\r\n      throw new TypeError('Invalid major version')\r\n    }\r\n\r\n    if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) {\r\n      throw new TypeError('Invalid minor version')\r\n    }\r\n\r\n    if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) {\r\n      throw new TypeError('Invalid patch version')\r\n    }\r\n\r\n    // numberify any prerelease numeric ids\r\n    if (!m[4]) {\r\n      this.prerelease = []\r\n    } else {\r\n      this.prerelease = m[4].split('.').map((id) => {\r\n        if (/^[0-9]+$/.test(id)) {\r\n          const num = +id\r\n          if (num >= 0 && num < MAX_SAFE_INTEGER) {\r\n            return num\r\n          }\r\n        }\r\n        return id\r\n      })\r\n    }\r\n\r\n    this.build = m[5] ? m[5].split('.') : []\r\n    this.format()\r\n  }\r\n\r\n  format () {\r\n    this.version = `${this.major}.${this.minor}.${this.patch}`\r\n    if (this.prerelease.length) {\r\n      this.version += `-${this.prerelease.join('.')}`\r\n    }\r\n    return this.version\r\n  }\r\n\r\n  toString () {\r\n    return this.version\r\n  }\r\n\r\n  compare (other) {\r\n    debug('SemVer.compare', this.version, this.options, other)\r\n    if (!(other instanceof SemVer)) {\r\n      if (typeof other === 'string' && other === this.version) {\r\n        return 0\r\n      }\r\n      other = new SemVer(other, this.options)\r\n    }\r\n\r\n    if (other.version === this.version) {\r\n      return 0\r\n    }\r\n\r\n    return this.compareMain(other) || this.comparePre(other)\r\n  }\r\n\r\n  compareMain (other) {\r\n    if (!(other instanceof SemVer)) {\r\n      other = new SemVer(other, this.options)\r\n    }\r\n\r\n    return (\r\n      compareIdentifiers(this.major, other.major) ||\r\n      compareIdentifiers(this.minor, other.minor) ||\r\n      compareIdentifiers(this.patch, other.patch)\r\n    )\r\n  }\r\n\r\n  comparePre (other) {\r\n    if (!(other instanceof SemVer)) {\r\n      other = new SemVer(other, this.options)\r\n    }\r\n\r\n    // NOT having a prerelease is > having one\r\n    if (this.prerelease.length && !other.prerelease.length) {\r\n      return -1\r\n    } else if (!this.prerelease.length && other.prerelease.length) {\r\n      return 1\r\n    } else if (!this.prerelease.length && !other.prerelease.length) {\r\n      return 0\r\n    }\r\n\r\n    let i = 0\r\n    do {\r\n      const a = this.prerelease[i]\r\n      const b = other.prerelease[i]\r\n      debug('prerelease compare', i, a, b)\r\n      if (a === undefined && b === undefined) {\r\n        return 0\r\n      } else if (b === undefined) {\r\n        return 1\r\n      } else if (a === undefined) {\r\n        return -1\r\n      } else if (a === b) {\r\n        continue\r\n      } else {\r\n        return compareIdentifiers(a, b)\r\n      }\r\n    } while (++i)\r\n  }\r\n\r\n  compareBuild (other) {\r\n    if (!(other instanceof SemVer)) {\r\n      other = new SemVer(other, this.options)\r\n    }\r\n\r\n    let i = 0\r\n    do {\r\n      const a = this.build[i]\r\n      const b = other.build[i]\r\n      debug('build compare', i, a, b)\r\n      if (a === undefined && b === undefined) {\r\n        return 0\r\n      } else if (b === undefined) {\r\n        return 1\r\n      } else if (a === undefined) {\r\n        return -1\r\n      } else if (a === b) {\r\n        continue\r\n      } else {\r\n        return compareIdentifiers(a, b)\r\n      }\r\n    } while (++i)\r\n  }\r\n\r\n  // preminor will bump the version up to the next minor release, and immediately\r\n  // down to pre-release. premajor and prepatch work the same way.\r\n  inc (release, identifier, identifierBase) {\r\n    if (release.startsWith('pre')) {\r\n      if (!identifier && identifierBase === false) {\r\n        throw new Error('invalid increment argument: identifier is empty')\r\n      }\r\n      // Avoid an invalid semver results\r\n      if (identifier) {\r\n        const r = new RegExp(`^${this.options.loose ? src[t.PRERELEASELOOSE] : src[t.PRERELEASE]}$`)\r\n        const match = `-${identifier}`.match(r)\r\n        if (!match || match[1] !== identifier) {\r\n          throw new Error(`invalid identifier: ${identifier}`)\r\n        }\r\n      }\r\n    }\r\n\r\n    switch (release) {\r\n      case 'premajor':\r\n        this.prerelease.length = 0\r\n        this.patch = 0\r\n        this.minor = 0\r\n        this.major++\r\n        this.inc('pre', identifier, identifierBase)\r\n        break\r\n      case 'preminor':\r\n        this.prerelease.length = 0\r\n        this.patch = 0\r\n        this.minor++\r\n        this.inc('pre', identifier, identifierBase)\r\n        break\r\n      case 'prepatch':\r\n        // If this is already a prerelease, it will bump to the next version\r\n        // drop any prereleases that might already exist, since they are not\r\n        // relevant at this point.\r\n        this.prerelease.length = 0\r\n        this.inc('patch', identifier, identifierBase)\r\n        this.inc('pre', identifier, identifierBase)\r\n        break\r\n      // If the input is a non-prerelease version, this acts the same as\r\n      // prepatch.\r\n      case 'prerelease':\r\n        if (this.prerelease.length === 0) {\r\n          this.inc('patch', identifier, identifierBase)\r\n        }\r\n        this.inc('pre', identifier, identifierBase)\r\n        break\r\n      case 'release':\r\n        if (this.prerelease.length === 0) {\r\n          throw new Error(`version ${this.raw} is not a prerelease`)\r\n        }\r\n        this.prerelease.length = 0\r\n        break\r\n\r\n      case 'major':\r\n        // If this is a pre-major version, bump up to the same major version.\r\n        // Otherwise increment major.\r\n        // 1.0.0-5 bumps to 1.0.0\r\n        // 1.1.0 bumps to 2.0.0\r\n        if (\r\n          this.minor !== 0 ||\r\n          this.patch !== 0 ||\r\n          this.prerelease.length === 0\r\n        ) {\r\n          this.major++\r\n        }\r\n        this.minor = 0\r\n        this.patch = 0\r\n        this.prerelease = []\r\n        break\r\n      case 'minor':\r\n        // If this is a pre-minor version, bump up to the same minor version.\r\n        // Otherwise increment minor.\r\n        // 1.2.0-5 bumps to 1.2.0\r\n        // 1.2.1 bumps to 1.3.0\r\n        if (this.patch !== 0 || this.prerelease.length === 0) {\r\n          this.minor++\r\n        }\r\n        this.patch = 0\r\n        this.prerelease = []\r\n        break\r\n      case 'patch':\r\n        // If this is not a pre-release version, it will increment the patch.\r\n        // If it is a pre-release it will bump up to the same patch version.\r\n        // 1.2.0-5 patches to 1.2.0\r\n        // 1.2.0 patches to 1.2.1\r\n        if (this.prerelease.length === 0) {\r\n          this.patch++\r\n        }\r\n        this.prerelease = []\r\n        break\r\n      // This probably shouldn't be used publicly.\r\n      // 1.0.0 'pre' would become 1.0.0-0 which is the wrong direction.\r\n      case 'pre': {\r\n        const base = Number(identifierBase) ? 1 : 0\r\n\r\n        if (this.prerelease.length === 0) {\r\n          this.prerelease = [base]\r\n        } else {\r\n          let i = this.prerelease.length\r\n          while (--i >= 0) {\r\n            if (typeof this.prerelease[i] === 'number') {\r\n              this.prerelease[i]++\r\n              i = -2\r\n            }\r\n          }\r\n          if (i === -1) {\r\n            // didn't increment anything\r\n            if (identifier === this.prerelease.join('.') && identifierBase === false) {\r\n              throw new Error('invalid increment argument: identifier already exists')\r\n            }\r\n            this.prerelease.push(base)\r\n          }\r\n        }\r\n        if (identifier) {\r\n          // 1.2.0-beta.1 bumps to 1.2.0-beta.2,\r\n          // 1.2.0-beta.fooblz or 1.2.0-beta bumps to 1.2.0-beta.0\r\n          let prerelease = [identifier, base]\r\n          if (identifierBase === false) {\r\n            prerelease = [identifier]\r\n          }\r\n          if (compareIdentifiers(this.prerelease[0], identifier) === 0) {\r\n            if (isNaN(this.prerelease[1])) {\r\n              this.prerelease = prerelease\r\n            }\r\n          } else {\r\n            this.prerelease = prerelease\r\n          }\r\n        }\r\n        break\r\n      }\r\n      default:\r\n        throw new Error(`invalid increment argument: ${release}`)\r\n    }\r\n    this.raw = this.format()\r\n    if (this.build.length) {\r\n      this.raw += `+${this.build.join('.')}`\r\n    }\r\n    return this\r\n  }\r\n}\r\n\r\nmodule.exports = SemVer\r\n","// parse out just the options we care about\r\nconst looseOption = Object.freeze({ loose: true })\r\nconst emptyOpts = Object.freeze({ })\r\nconst parseOptions = options => {\r\n  if (!options) {\r\n    return emptyOpts\r\n  }\r\n\r\n  if (typeof options !== 'object') {\r\n    return looseOption\r\n  }\r\n\r\n  return options\r\n}\r\nmodule.exports = parseOptions\r\n","const numeric = /^[0-9]+$/\r\nconst compareIdentifiers = (a, b) => {\r\n  const anum = numeric.test(a)\r\n  const bnum = numeric.test(b)\r\n\r\n  if (anum && bnum) {\r\n    a = +a\r\n    b = +b\r\n  }\r\n\r\n  return a === b ? 0\r\n    : (anum && !bnum) ? -1\r\n    : (bnum && !anum) ? 1\r\n    : a < b ? -1\r\n    : 1\r\n}\r\n\r\nconst rcompareIdentifiers = (a, b) => compareIdentifiers(b, a)\r\n\r\nmodule.exports = {\r\n  compareIdentifiers,\r\n  rcompareIdentifiers,\r\n}\r\n","const SemVer = require('../classes/semver')\r\nconst parse = (version, options, throwErrors = false) => {\r\n  if (version instanceof SemVer) {\r\n    return version\r\n  }\r\n  try {\r\n    return new SemVer(version, options)\r\n  } catch (er) {\r\n    if (!throwErrors) {\r\n      return null\r\n    }\r\n    throw er\r\n  }\r\n}\r\n\r\nmodule.exports = parse\r\n","const parse = require('./parse')\r\nconst valid = (version, options) => {\r\n  const v = parse(version, options)\r\n  return v ? v.version : null\r\n}\r\nmodule.exports = valid\r\n","const parse = require('./parse')\r\nconst clean = (version, options) => {\r\n  const s = parse(version.trim().replace(/^[=v]+/, ''), options)\r\n  return s ? s.version : null\r\n}\r\nmodule.exports = clean\r\n","const SemVer = require('../classes/semver')\r\n\r\nconst inc = (version, release, options, identifier, identifierBase) => {\r\n  if (typeof (options) === 'string') {\r\n    identifierBase = identifier\r\n    identifier = options\r\n    options = undefined\r\n  }\r\n\r\n  try {\r\n    return new SemVer(\r\n      version instanceof SemVer ? version.version : version,\r\n      options\r\n    ).inc(release, identifier, identifierBase).version\r\n  } catch (er) {\r\n    return null\r\n  }\r\n}\r\nmodule.exports = inc\r\n","const parse = require('./parse.js')\r\n\r\nconst diff = (version1, version2) => {\r\n  const v1 = parse(version1, null, true)\r\n  const v2 = parse(version2, null, true)\r\n  const comparison = v1.compare(v2)\r\n\r\n  if (comparison === 0) {\r\n    return null\r\n  }\r\n\r\n  const v1Higher = comparison > 0\r\n  const highVersion = v1Higher ? v1 : v2\r\n  const lowVersion = v1Higher ? v2 : v1\r\n  const highHasPre = !!highVersion.prerelease.length\r\n  const lowHasPre = !!lowVersion.prerelease.length\r\n\r\n  if (lowHasPre && !highHasPre) {\r\n    // Going from prerelease -> no prerelease requires some special casing\r\n\r\n    // If the low version has only a major, then it will always be a major\r\n    // Some examples:\r\n    // 1.0.0-1 -> 1.0.0\r\n    // 1.0.0-1 -> 1.1.1\r\n    // 1.0.0-1 -> 2.0.0\r\n    if (!lowVersion.patch && !lowVersion.minor) {\r\n      return 'major'\r\n    }\r\n\r\n    // If the main part has no difference\r\n    if (lowVersion.compareMain(highVersion) === 0) {\r\n      if (lowVersion.minor && !lowVersion.patch) {\r\n        return 'minor'\r\n      }\r\n      return 'patch'\r\n    }\r\n  }\r\n\r\n  // add the `pre` prefix if we are going to a prerelease version\r\n  const prefix = highHasPre ? 'pre' : ''\r\n\r\n  if (v1.major !== v2.major) {\r\n    return prefix + 'major'\r\n  }\r\n\r\n  if (v1.minor !== v2.minor) {\r\n    return prefix + 'minor'\r\n  }\r\n\r\n  if (v1.patch !== v2.patch) {\r\n    return prefix + 'patch'\r\n  }\r\n\r\n  // high and low are preleases\r\n  return 'prerelease'\r\n}\r\n\r\nmodule.exports = diff\r\n","const SemVer = require('../classes/semver')\r\nconst major = (a, loose) => new SemVer(a, loose).major\r\nmodule.exports = major\r\n","const SemVer = require('../classes/semver')\r\nconst minor = (a, loose) => new SemVer(a, loose).minor\r\nmodule.exports = minor\r\n","const SemVer = require('../classes/semver')\r\nconst patch = (a, loose) => new SemVer(a, loose).patch\r\nmodule.exports = patch\r\n","const parse = require('./parse')\r\nconst prerelease = (version, options) => {\r\n  const parsed = parse(version, options)\r\n  return (parsed && parsed.prerelease.length) ? parsed.prerelease : null\r\n}\r\nmodule.exports = prerelease\r\n","const SemVer = require('../classes/semver')\r\nconst compare = (a, b, loose) =>\r\n  new SemVer(a, loose).compare(new SemVer(b, loose))\r\n\r\nmodule.exports = compare\r\n","const compare = require('./compare')\r\nconst rcompare = (a, b, loose) => compare(b, a, loose)\r\nmodule.exports = rcompare\r\n","const compare = require('./compare')\r\nconst compareLoose = (a, b) => compare(a, b, true)\r\nmodule.exports = compareLoose\r\n","const SemVer = require('../classes/semver')\r\nconst compareBuild = (a, b, loose) => {\r\n  const versionA = new SemVer(a, loose)\r\n  const versionB = new SemVer(b, loose)\r\n  return versionA.compare(versionB) || versionA.compareBuild(versionB)\r\n}\r\nmodule.exports = compareBuild\r\n","const compareBuild = require('./compare-build')\r\nconst sort = (list, loose) => list.sort((a, b) => compareBuild(a, b, loose))\r\nmodule.exports = sort\r\n","const compareBuild = require('./compare-build')\r\nconst rsort = (list, loose) => list.sort((a, b) => compareBuild(b, a, loose))\r\nmodule.exports = rsort\r\n","const compare = require('./compare')\r\nconst gt = (a, b, loose) => compare(a, b, loose) > 0\r\nmodule.exports = gt\r\n","const compare = require('./compare')\r\nconst lt = (a, b, loose) => compare(a, b, loose) < 0\r\nmodule.exports = lt\r\n","const compare = require('./compare')\r\nconst eq = (a, b, loose) => compare(a, b, loose) === 0\r\nmodule.exports = eq\r\n","const compare = require('./compare')\r\nconst neq = (a, b, loose) => compare(a, b, loose) !== 0\r\nmodule.exports = neq\r\n","const compare = require('./compare')\r\nconst gte = (a, b, loose) => compare(a, b, loose) >= 0\r\nmodule.exports = gte\r\n","const compare = require('./compare')\r\nconst lte = (a, b, loose) => compare(a, b, loose) <= 0\r\nmodule.exports = lte\r\n","const eq = require('./eq')\r\nconst neq = require('./neq')\r\nconst gt = require('./gt')\r\nconst gte = require('./gte')\r\nconst lt = require('./lt')\r\nconst lte = require('./lte')\r\n\r\nconst cmp = (a, op, b, loose) => {\r\n  switch (op) {\r\n    case '===':\r\n      if (typeof a === 'object') {\r\n        a = a.version\r\n      }\r\n      if (typeof b === 'object') {\r\n        b = b.version\r\n      }\r\n      return a === b\r\n\r\n    case '!==':\r\n      if (typeof a === 'object') {\r\n        a = a.version\r\n      }\r\n      if (typeof b === 'object') {\r\n        b = b.version\r\n      }\r\n      return a !== b\r\n\r\n    case '':\r\n    case '=':\r\n    case '==':\r\n      return eq(a, b, loose)\r\n\r\n    case '!=':\r\n      return neq(a, b, loose)\r\n\r\n    case '>':\r\n      return gt(a, b, loose)\r\n\r\n    case '>=':\r\n      return gte(a, b, loose)\r\n\r\n    case '<':\r\n      return lt(a, b, loose)\r\n\r\n    case '<=':\r\n      return lte(a, b, loose)\r\n\r\n    default:\r\n      throw new TypeError(`Invalid operator: ${op}`)\r\n  }\r\n}\r\nmodule.exports = cmp\r\n","const SemVer = require('../classes/semver')\r\nconst parse = require('./parse')\r\nconst { safeRe: re, t } = require('../internal/re')\r\n\r\nconst coerce = (version, options) => {\r\n  if (version instanceof SemVer) {\r\n    return version\r\n  }\r\n\r\n  if (typeof version === 'number') {\r\n    version = String(version)\r\n  }\r\n\r\n  if (typeof version !== 'string') {\r\n    return null\r\n  }\r\n\r\n  options = options || {}\r\n\r\n  let match = null\r\n  if (!options.rtl) {\r\n    match = version.match(options.includePrerelease ? re[t.COERCEFULL] : re[t.COERCE])\r\n  } else {\r\n    // Find the right-most coercible string that does not share\r\n    // a terminus with a more left-ward coercible string.\r\n    // Eg, '1.2.3.4' wants to coerce '2.3.4', not '3.4' or '4'\r\n    // With includePrerelease option set, '1.2.3.4-rc' wants to coerce '2.3.4-rc', not '2.3.4'\r\n    //\r\n    // Walk through the string checking with a /g regexp\r\n    // Manually set the index so as to pick up overlapping matches.\r\n    // Stop when we get a match that ends at the string end, since no\r\n    // coercible string can be more right-ward without the same terminus.\r\n    const coerceRtlRegex = options.includePrerelease ? re[t.COERCERTLFULL] : re[t.COERCERTL]\r\n    let next\r\n    while ((next = coerceRtlRegex.exec(version)) &&\r\n        (!match || match.index + match[0].length !== version.length)\r\n    ) {\r\n      if (!match ||\r\n            next.index + next[0].length !== match.index + match[0].length) {\r\n        match = next\r\n      }\r\n      coerceRtlRegex.lastIndex = next.index + next[1].length + next[2].length\r\n    }\r\n    // leave it in a clean state\r\n    coerceRtlRegex.lastIndex = -1\r\n  }\r\n\r\n  if (match === null) {\r\n    return null\r\n  }\r\n\r\n  const major = match[2]\r\n  const minor = match[3] || '0'\r\n  const patch = match[4] || '0'\r\n  const prerelease = options.includePrerelease && match[5] ? `-${match[5]}` : ''\r\n  const build = options.includePrerelease && match[6] ? `+${match[6]}` : ''\r\n\r\n  return parse(`${major}.${minor}.${patch}${prerelease}${build}`, options)\r\n}\r\nmodule.exports = coerce\r\n","const ANY = Symbol('SemVer ANY')\r\n// hoisted class for cyclic dependency\r\nclass Comparator {\r\n  static get ANY () {\r\n    return ANY\r\n  }\r\n\r\n  constructor (comp, options) {\r\n    options = parseOptions(options)\r\n\r\n    if (comp instanceof Comparator) {\r\n      if (comp.loose === !!options.loose) {\r\n        return comp\r\n      } else {\r\n        comp = comp.value\r\n      }\r\n    }\r\n\r\n    comp = comp.trim().split(/\\s+/).join(' ')\r\n    debug('comparator', comp, options)\r\n    this.options = options\r\n    this.loose = !!options.loose\r\n    this.parse(comp)\r\n\r\n    if (this.semver === ANY) {\r\n      this.value = ''\r\n    } else {\r\n      this.value = this.operator + this.semver.version\r\n    }\r\n\r\n    debug('comp', this)\r\n  }\r\n\r\n  parse (comp) {\r\n    const r = this.options.loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR]\r\n    const m = comp.match(r)\r\n\r\n    if (!m) {\r\n      throw new TypeError(`Invalid comparator: ${comp}`)\r\n    }\r\n\r\n    this.operator = m[1] !== undefined ? m[1] : ''\r\n    if (this.operator === '=') {\r\n      this.operator = ''\r\n    }\r\n\r\n    // if it literally is just '>' or '' then allow anything.\r\n    if (!m[2]) {\r\n      this.semver = ANY\r\n    } else {\r\n      this.semver = new SemVer(m[2], this.options.loose)\r\n    }\r\n  }\r\n\r\n  toString () {\r\n    return this.value\r\n  }\r\n\r\n  test (version) {\r\n    debug('Comparator.test', version, this.options.loose)\r\n\r\n    if (this.semver === ANY || version === ANY) {\r\n      return true\r\n    }\r\n\r\n    if (typeof version === 'string') {\r\n      try {\r\n        version = new SemVer(version, this.options)\r\n      } catch (er) {\r\n        return false\r\n      }\r\n    }\r\n\r\n    return cmp(version, this.operator, this.semver, this.options)\r\n  }\r\n\r\n  intersects (comp, options) {\r\n    if (!(comp instanceof Comparator)) {\r\n      throw new TypeError('a Comparator is required')\r\n    }\r\n\r\n    if (this.operator === '') {\r\n      if (this.value === '') {\r\n        return true\r\n      }\r\n      return new Range(comp.value, options).test(this.value)\r\n    } else if (comp.operator === '') {\r\n      if (comp.value === '') {\r\n        return true\r\n      }\r\n      return new Range(this.value, options).test(comp.semver)\r\n    }\r\n\r\n    options = parseOptions(options)\r\n\r\n    // Special cases where nothing can possibly be lower\r\n    if (options.includePrerelease &&\r\n      (this.value === '<0.0.0-0' || comp.value === '<0.0.0-0')) {\r\n      return false\r\n    }\r\n    if (!options.includePrerelease &&\r\n      (this.value.startsWith('<0.0.0') || comp.value.startsWith('<0.0.0'))) {\r\n      return false\r\n    }\r\n\r\n    // Same direction increasing (> or >=)\r\n    if (this.operator.startsWith('>') && comp.operator.startsWith('>')) {\r\n      return true\r\n    }\r\n    // Same direction decreasing (< or <=)\r\n    if (this.operator.startsWith('<') && comp.operator.startsWith('<')) {\r\n      return true\r\n    }\r\n    // same SemVer and both sides are inclusive (<= or >=)\r\n    if (\r\n      (this.semver.version === comp.semver.version) &&\r\n      this.operator.includes('=') && comp.operator.includes('=')) {\r\n      return true\r\n    }\r\n    // opposite directions less than\r\n    if (cmp(this.semver, '<', comp.semver, options) &&\r\n      this.operator.startsWith('>') && comp.operator.startsWith('<')) {\r\n      return true\r\n    }\r\n    // opposite directions greater than\r\n    if (cmp(this.semver, '>', comp.semver, options) &&\r\n      this.operator.startsWith('<') && comp.operator.startsWith('>')) {\r\n      return true\r\n    }\r\n    return false\r\n  }\r\n}\r\n\r\nmodule.exports = Comparator\r\n\r\nconst parseOptions = require('../internal/parse-options')\r\nconst { safeRe: re, t } = require('../internal/re')\r\nconst cmp = require('../functions/cmp')\r\nconst debug = require('../internal/debug')\r\nconst SemVer = require('./semver')\r\nconst Range = require('./range')\r\n","const SPACE_CHARACTERS = /\\s+/g\r\n\r\n// hoisted class for cyclic dependency\r\nclass Range {\r\n  constructor (range, options) {\r\n    options = parseOptions(options)\r\n\r\n    if (range instanceof Range) {\r\n      if (\r\n        range.loose === !!options.loose &&\r\n        range.includePrerelease === !!options.includePrerelease\r\n      ) {\r\n        return range\r\n      } else {\r\n        return new Range(range.raw, options)\r\n      }\r\n    }\r\n\r\n    if (range instanceof Comparator) {\r\n      // just put it in the set and return\r\n      this.raw = range.value\r\n      this.set = [[range]]\r\n      this.formatted = undefined\r\n      return this\r\n    }\r\n\r\n    this.options = options\r\n    this.loose = !!options.loose\r\n    this.includePrerelease = !!options.includePrerelease\r\n\r\n    // First reduce all whitespace as much as possible so we do not have to rely\r\n    // on potentially slow regexes like \\s*. This is then stored and used for\r\n    // future error messages as well.\r\n    this.raw = range.trim().replace(SPACE_CHARACTERS, ' ')\r\n\r\n    // First, split on ||\r\n    this.set = this.raw\r\n      .split('||')\r\n      // map the range to a 2d array of comparators\r\n      .map(r => this.parseRange(r.trim()))\r\n      // throw out any comparator lists that are empty\r\n      // this generally means that it was not a valid range, which is allowed\r\n      // in loose mode, but will still throw if the WHOLE range is invalid.\r\n      .filter(c => c.length)\r\n\r\n    if (!this.set.length) {\r\n      throw new TypeError(`Invalid SemVer Range: ${this.raw}`)\r\n    }\r\n\r\n    // if we have any that are not the null set, throw out null sets.\r\n    if (this.set.length > 1) {\r\n      // keep the first one, in case they're all null sets\r\n      const first = this.set[0]\r\n      this.set = this.set.filter(c => !isNullSet(c[0]))\r\n      if (this.set.length === 0) {\r\n        this.set = [first]\r\n      } else if (this.set.length > 1) {\r\n        // if we have any that are *, then the range is just *\r\n        for (const c of this.set) {\r\n          if (c.length === 1 && isAny(c[0])) {\r\n            this.set = [c]\r\n            break\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    this.formatted = undefined\r\n  }\r\n\r\n  get range () {\r\n    if (this.formatted === undefined) {\r\n      this.formatted = ''\r\n      for (let i = 0; i < this.set.length; i++) {\r\n        if (i > 0) {\r\n          this.formatted += '||'\r\n        }\r\n        const comps = this.set[i]\r\n        for (let k = 0; k < comps.length; k++) {\r\n          if (k > 0) {\r\n            this.formatted += ' '\r\n          }\r\n          this.formatted += comps[k].toString().trim()\r\n        }\r\n      }\r\n    }\r\n    return this.formatted\r\n  }\r\n\r\n  format () {\r\n    return this.range\r\n  }\r\n\r\n  toString () {\r\n    return this.range\r\n  }\r\n\r\n  parseRange (range) {\r\n    // memoize range parsing for performance.\r\n    // this is a very hot path, and fully deterministic.\r\n    const memoOpts =\r\n      (this.options.includePrerelease && FLAG_INCLUDE_PRERELEASE) |\r\n      (this.options.loose && FLAG_LOOSE)\r\n    const memoKey = memoOpts + ':' + range\r\n    const cached = cache.get(memoKey)\r\n    if (cached) {\r\n      return cached\r\n    }\r\n\r\n    const loose = this.options.loose\r\n    // `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`\r\n    const hr = loose ? re[t.HYPHENRANGELOOSE] : re[t.HYPHENRANGE]\r\n    range = range.replace(hr, hyphenReplace(this.options.includePrerelease))\r\n    debug('hyphen replace', range)\r\n\r\n    // `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`\r\n    range = range.replace(re[t.COMPARATORTRIM], comparatorTrimReplace)\r\n    debug('comparator trim', range)\r\n\r\n    // `~ 1.2.3` => `~1.2.3`\r\n    range = range.replace(re[t.TILDETRIM], tildeTrimReplace)\r\n    debug('tilde trim', range)\r\n\r\n    // `^ 1.2.3` => `^1.2.3`\r\n    range = range.replace(re[t.CARETTRIM], caretTrimReplace)\r\n    debug('caret trim', range)\r\n\r\n    // At this point, the range is completely trimmed and\r\n    // ready to be split into comparators.\r\n\r\n    let rangeList = range\r\n      .split(' ')\r\n      .map(comp => parseComparator(comp, this.options))\r\n      .join(' ')\r\n      .split(/\\s+/)\r\n      // >=0.0.0 is equivalent to *\r\n      .map(comp => replaceGTE0(comp, this.options))\r\n\r\n    if (loose) {\r\n      // in loose mode, throw out any that are not valid comparators\r\n      rangeList = rangeList.filter(comp => {\r\n        debug('loose invalid filter', comp, this.options)\r\n        return !!comp.match(re[t.COMPARATORLOOSE])\r\n      })\r\n    }\r\n    debug('range list', rangeList)\r\n\r\n    // if any comparators are the null set, then replace with JUST null set\r\n    // if more than one comparator, remove any * comparators\r\n    // also, don't include the same comparator more than once\r\n    const rangeMap = new Map()\r\n    const comparators = rangeList.map(comp => new Comparator(comp, this.options))\r\n    for (const comp of comparators) {\r\n      if (isNullSet(comp)) {\r\n        return [comp]\r\n      }\r\n      rangeMap.set(comp.value, comp)\r\n    }\r\n    if (rangeMap.size > 1 && rangeMap.has('')) {\r\n      rangeMap.delete('')\r\n    }\r\n\r\n    const result = [...rangeMap.values()]\r\n    cache.set(memoKey, result)\r\n    return result\r\n  }\r\n\r\n  intersects (range, options) {\r\n    if (!(range instanceof Range)) {\r\n      throw new TypeError('a Range is required')\r\n    }\r\n\r\n    return this.set.some((thisComparators) => {\r\n      return (\r\n        isSatisfiable(thisComparators, options) &&\r\n        range.set.some((rangeComparators) => {\r\n          return (\r\n            isSatisfiable(rangeComparators, options) &&\r\n            thisComparators.every((thisComparator) => {\r\n              return rangeComparators.every((rangeComparator) => {\r\n                return thisComparator.intersects(rangeComparator, options)\r\n              })\r\n            })\r\n          )\r\n        })\r\n      )\r\n    })\r\n  }\r\n\r\n  // if ANY of the sets match ALL of its comparators, then pass\r\n  test (version) {\r\n    if (!version) {\r\n      return false\r\n    }\r\n\r\n    if (typeof version === 'string') {\r\n      try {\r\n        version = new SemVer(version, this.options)\r\n      } catch (er) {\r\n        return false\r\n      }\r\n    }\r\n\r\n    for (let i = 0; i < this.set.length; i++) {\r\n      if (testSet(this.set[i], version, this.options)) {\r\n        return true\r\n      }\r\n    }\r\n    return false\r\n  }\r\n}\r\n\r\nmodule.exports = Range\r\n\r\nconst LRU = require('../internal/lrucache')\r\nconst cache = new LRU()\r\n\r\nconst parseOptions = require('../internal/parse-options')\r\nconst Comparator = require('./comparator')\r\nconst debug = require('../internal/debug')\r\nconst SemVer = require('./semver')\r\nconst {\r\n  safeRe: re,\r\n  t,\r\n  comparatorTrimReplace,\r\n  tildeTrimReplace,\r\n  caretTrimReplace,\r\n} = require('../internal/re')\r\nconst { FLAG_INCLUDE_PRERELEASE, FLAG_LOOSE } = require('../internal/constants')\r\n\r\nconst isNullSet = c => c.value === '<0.0.0-0'\r\nconst isAny = c => c.value === ''\r\n\r\n// take a set of comparators and determine whether there\r\n// exists a version which can satisfy it\r\nconst isSatisfiable = (comparators, options) => {\r\n  let result = true\r\n  const remainingComparators = comparators.slice()\r\n  let testComparator = remainingComparators.pop()\r\n\r\n  while (result && remainingComparators.length) {\r\n    result = remainingComparators.every((otherComparator) => {\r\n      return testComparator.intersects(otherComparator, options)\r\n    })\r\n\r\n    testComparator = remainingComparators.pop()\r\n  }\r\n\r\n  return result\r\n}\r\n\r\n// comprised of xranges, tildes, stars, and gtlt's at this point.\r\n// already replaced the hyphen ranges\r\n// turn into a set of JUST comparators.\r\nconst parseComparator = (comp, options) => {\r\n  debug('comp', comp, options)\r\n  comp = replaceCarets(comp, options)\r\n  debug('caret', comp)\r\n  comp = replaceTildes(comp, options)\r\n  debug('tildes', comp)\r\n  comp = replaceXRanges(comp, options)\r\n  debug('xrange', comp)\r\n  comp = replaceStars(comp, options)\r\n  debug('stars', comp)\r\n  return comp\r\n}\r\n\r\nconst isX = id => !id || id.toLowerCase() === 'x' || id === '*'\r\n\r\n// ~, ~> --> * (any, kinda silly)\r\n// ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0-0\r\n// ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0-0\r\n// ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0-0\r\n// ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0-0\r\n// ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0-0\r\n// ~0.0.1 --> >=0.0.1 <0.1.0-0\r\nconst replaceTildes = (comp, options) => {\r\n  return comp\r\n    .trim()\r\n    .split(/\\s+/)\r\n    .map((c) => replaceTilde(c, options))\r\n    .join(' ')\r\n}\r\n\r\nconst replaceTilde = (comp, options) => {\r\n  const r = options.loose ? re[t.TILDELOOSE] : re[t.TILDE]\r\n  return comp.replace(r, (_, M, m, p, pr) => {\r\n    debug('tilde', comp, _, M, m, p, pr)\r\n    let ret\r\n\r\n    if (isX(M)) {\r\n      ret = ''\r\n    } else if (isX(m)) {\r\n      ret = `>=${M}.0.0 <${+M + 1}.0.0-0`\r\n    } else if (isX(p)) {\r\n      // ~1.2 == >=1.2.0 <1.3.0-0\r\n      ret = `>=${M}.${m}.0 <${M}.${+m + 1}.0-0`\r\n    } else if (pr) {\r\n      debug('replaceTilde pr', pr)\r\n      ret = `>=${M}.${m}.${p}-${pr\r\n      } <${M}.${+m + 1}.0-0`\r\n    } else {\r\n      // ~1.2.3 == >=1.2.3 <1.3.0-0\r\n      ret = `>=${M}.${m}.${p\r\n      } <${M}.${+m + 1}.0-0`\r\n    }\r\n\r\n    debug('tilde return', ret)\r\n    return ret\r\n  })\r\n}\r\n\r\n// ^ --> * (any, kinda silly)\r\n// ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0-0\r\n// ^2.0, ^2.0.x --> >=2.0.0 <3.0.0-0\r\n// ^1.2, ^1.2.x --> >=1.2.0 <2.0.0-0\r\n// ^1.2.3 --> >=1.2.3 <2.0.0-0\r\n// ^1.2.0 --> >=1.2.0 <2.0.0-0\r\n// ^0.0.1 --> >=0.0.1 <0.0.2-0\r\n// ^0.1.0 --> >=0.1.0 <0.2.0-0\r\nconst replaceCarets = (comp, options) => {\r\n  return comp\r\n    .trim()\r\n    .split(/\\s+/)\r\n    .map((c) => replaceCaret(c, options))\r\n    .join(' ')\r\n}\r\n\r\nconst replaceCaret = (comp, options) => {\r\n  debug('caret', comp, options)\r\n  const r = options.loose ? re[t.CARETLOOSE] : re[t.CARET]\r\n  const z = options.includePrerelease ? '-0' : ''\r\n  return comp.replace(r, (_, M, m, p, pr) => {\r\n    debug('caret', comp, _, M, m, p, pr)\r\n    let ret\r\n\r\n    if (isX(M)) {\r\n      ret = ''\r\n    } else if (isX(m)) {\r\n      ret = `>=${M}.0.0${z} <${+M + 1}.0.0-0`\r\n    } else if (isX(p)) {\r\n      if (M === '0') {\r\n        ret = `>=${M}.${m}.0${z} <${M}.${+m + 1}.0-0`\r\n      } else {\r\n        ret = `>=${M}.${m}.0${z} <${+M + 1}.0.0-0`\r\n      }\r\n    } else if (pr) {\r\n      debug('replaceCaret pr', pr)\r\n      if (M === '0') {\r\n        if (m === '0') {\r\n          ret = `>=${M}.${m}.${p}-${pr\r\n          } <${M}.${m}.${+p + 1}-0`\r\n        } else {\r\n          ret = `>=${M}.${m}.${p}-${pr\r\n          } <${M}.${+m + 1}.0-0`\r\n        }\r\n      } else {\r\n        ret = `>=${M}.${m}.${p}-${pr\r\n        } <${+M + 1}.0.0-0`\r\n      }\r\n    } else {\r\n      debug('no pr')\r\n      if (M === '0') {\r\n        if (m === '0') {\r\n          ret = `>=${M}.${m}.${p\r\n          }${z} <${M}.${m}.${+p + 1}-0`\r\n        } else {\r\n          ret = `>=${M}.${m}.${p\r\n          }${z} <${M}.${+m + 1}.0-0`\r\n        }\r\n      } else {\r\n        ret = `>=${M}.${m}.${p\r\n        } <${+M + 1}.0.0-0`\r\n      }\r\n    }\r\n\r\n    debug('caret return', ret)\r\n    return ret\r\n  })\r\n}\r\n\r\nconst replaceXRanges = (comp, options) => {\r\n  debug('replaceXRanges', comp, options)\r\n  return comp\r\n    .split(/\\s+/)\r\n    .map((c) => replaceXRange(c, options))\r\n    .join(' ')\r\n}\r\n\r\nconst replaceXRange = (comp, options) => {\r\n  comp = comp.trim()\r\n  const r = options.loose ? re[t.XRANGELOOSE] : re[t.XRANGE]\r\n  return comp.replace(r, (ret, gtlt, M, m, p, pr) => {\r\n    debug('xRange', comp, ret, gtlt, M, m, p, pr)\r\n    const xM = isX(M)\r\n    const xm = xM || isX(m)\r\n    const xp = xm || isX(p)\r\n    const anyX = xp\r\n\r\n    if (gtlt === '=' && anyX) {\r\n      gtlt = ''\r\n    }\r\n\r\n    // if we're including prereleases in the match, then we need\r\n    // to fix this to -0, the lowest possible prerelease value\r\n    pr = options.includePrerelease ? '-0' : ''\r\n\r\n    if (xM) {\r\n      if (gtlt === '>' || gtlt === '<') {\r\n        // nothing is allowed\r\n        ret = '<0.0.0-0'\r\n      } else {\r\n        // nothing is forbidden\r\n        ret = '*'\r\n      }\r\n    } else if (gtlt && anyX) {\r\n      // we know patch is an x, because we have any x at all.\r\n      // replace X with 0\r\n      if (xm) {\r\n        m = 0\r\n      }\r\n      p = 0\r\n\r\n      if (gtlt === '>') {\r\n        // >1 => >=2.0.0\r\n        // >1.2 => >=1.3.0\r\n        gtlt = '>='\r\n        if (xm) {\r\n          M = +M + 1\r\n          m = 0\r\n          p = 0\r\n        } else {\r\n          m = +m + 1\r\n          p = 0\r\n        }\r\n      } else if (gtlt === '<=') {\r\n        // <=0.7.x is actually <0.8.0, since any 0.7.x should\r\n        // pass.  Similarly, <=7.x is actually <8.0.0, etc.\r\n        gtlt = '<'\r\n        if (xm) {\r\n          M = +M + 1\r\n        } else {\r\n          m = +m + 1\r\n        }\r\n      }\r\n\r\n      if (gtlt === '<') {\r\n        pr = '-0'\r\n      }\r\n\r\n      ret = `${gtlt + M}.${m}.${p}${pr}`\r\n    } else if (xm) {\r\n      ret = `>=${M}.0.0${pr} <${+M + 1}.0.0-0`\r\n    } else if (xp) {\r\n      ret = `>=${M}.${m}.0${pr\r\n      } <${M}.${+m + 1}.0-0`\r\n    }\r\n\r\n    debug('xRange return', ret)\r\n\r\n    return ret\r\n  })\r\n}\r\n\r\n// Because * is AND-ed with everything else in the comparator,\r\n// and '' means \"any version\", just remove the *s entirely.\r\nconst replaceStars = (comp, options) => {\r\n  debug('replaceStars', comp, options)\r\n  // Looseness is ignored here.  star is always as loose as it gets!\r\n  return comp\r\n    .trim()\r\n    .replace(re[t.STAR], '')\r\n}\r\n\r\nconst replaceGTE0 = (comp, options) => {\r\n  debug('replaceGTE0', comp, options)\r\n  return comp\r\n    .trim()\r\n    .replace(re[options.includePrerelease ? t.GTE0PRE : t.GTE0], '')\r\n}\r\n\r\n// This function is passed to string.replace(re[t.HYPHENRANGE])\r\n// M, m, patch, prerelease, build\r\n// 1.2 - 3.4.5 => >=1.2.0 <=3.4.5\r\n// 1.2.3 - 3.4 => >=1.2.0 <3.5.0-0 Any 3.4.x will do\r\n// 1.2 - 3.4 => >=1.2.0 <3.5.0-0\r\n// TODO build?\r\nconst hyphenReplace = incPr => ($0,\r\n  from, fM, fm, fp, fpr, fb,\r\n  to, tM, tm, tp, tpr) => {\r\n  if (isX(fM)) {\r\n    from = ''\r\n  } else if (isX(fm)) {\r\n    from = `>=${fM}.0.0${incPr ? '-0' : ''}`\r\n  } else if (isX(fp)) {\r\n    from = `>=${fM}.${fm}.0${incPr ? '-0' : ''}`\r\n  } else if (fpr) {\r\n    from = `>=${from}`\r\n  } else {\r\n    from = `>=${from}${incPr ? '-0' : ''}`\r\n  }\r\n\r\n  if (isX(tM)) {\r\n    to = ''\r\n  } else if (isX(tm)) {\r\n    to = `<${+tM + 1}.0.0-0`\r\n  } else if (isX(tp)) {\r\n    to = `<${tM}.${+tm + 1}.0-0`\r\n  } else if (tpr) {\r\n    to = `<=${tM}.${tm}.${tp}-${tpr}`\r\n  } else if (incPr) {\r\n    to = `<${tM}.${tm}.${+tp + 1}-0`\r\n  } else {\r\n    to = `<=${to}`\r\n  }\r\n\r\n  return `${from} ${to}`.trim()\r\n}\r\n\r\nconst testSet = (set, version, options) => {\r\n  for (let i = 0; i < set.length; i++) {\r\n    if (!set[i].test(version)) {\r\n      return false\r\n    }\r\n  }\r\n\r\n  if (version.prerelease.length && !options.includePrerelease) {\r\n    // Find the set of versions that are allowed to have prereleases\r\n    // For example, ^1.2.3-pr.1 desugars to >=1.2.3-pr.1 <2.0.0\r\n    // That should allow `1.2.3-pr.2` to pass.\r\n    // However, `1.2.4-alpha.notready` should NOT be allowed,\r\n    // even though it's within the range set by the comparators.\r\n    for (let i = 0; i < set.length; i++) {\r\n      debug(set[i].semver)\r\n      if (set[i].semver === Comparator.ANY) {\r\n        continue\r\n      }\r\n\r\n      if (set[i].semver.prerelease.length > 0) {\r\n        const allowed = set[i].semver\r\n        if (allowed.major === version.major &&\r\n            allowed.minor === version.minor &&\r\n            allowed.patch === version.patch) {\r\n          return true\r\n        }\r\n      }\r\n    }\r\n\r\n    // Version has a -pre, but it's not one of the ones we like.\r\n    return false\r\n  }\r\n\r\n  return true\r\n}\r\n","class LRUCache {\r\n  constructor () {\r\n    this.max = 1000\r\n    this.map = new Map()\r\n  }\r\n\r\n  get (key) {\r\n    const value = this.map.get(key)\r\n    if (value === undefined) {\r\n      return undefined\r\n    } else {\r\n      // Remove the key from the map and add it to the end\r\n      this.map.delete(key)\r\n      this.map.set(key, value)\r\n      return value\r\n    }\r\n  }\r\n\r\n  delete (key) {\r\n    return this.map.delete(key)\r\n  }\r\n\r\n  set (key, value) {\r\n    const deleted = this.delete(key)\r\n\r\n    if (!deleted && value !== undefined) {\r\n      // If cache is full, delete the least recently used item\r\n      if (this.map.size >= this.max) {\r\n        const firstKey = this.map.keys().next().value\r\n        this.delete(firstKey)\r\n      }\r\n\r\n      this.map.set(key, value)\r\n    }\r\n\r\n    return this\r\n  }\r\n}\r\n\r\nmodule.exports = LRUCache\r\n","const Range = require('../classes/range')\r\nconst satisfies = (version, range, options) => {\r\n  try {\r\n    range = new Range(range, options)\r\n  } catch (er) {\r\n    return false\r\n  }\r\n  return range.test(version)\r\n}\r\nmodule.exports = satisfies\r\n","const Range = require('../classes/range')\r\n\r\n// Mostly just for testing and legacy API reasons\r\nconst toComparators = (range, options) =>\r\n  new Range(range, options).set\r\n    .map(comp => comp.map(c => c.value).join(' ').trim().split(' '))\r\n\r\nmodule.exports = toComparators\r\n","const SemVer = require('../classes/semver')\r\nconst Range = require('../classes/range')\r\n\r\nconst maxSatisfying = (versions, range, options) => {\r\n  let max = null\r\n  let maxSV = null\r\n  let rangeObj = null\r\n  try {\r\n    rangeObj = new Range(range, options)\r\n  } catch (er) {\r\n    return null\r\n  }\r\n  versions.forEach((v) => {\r\n    if (rangeObj.test(v)) {\r\n      // satisfies(v, range, options)\r\n      if (!max || maxSV.compare(v) === -1) {\r\n        // compare(max, v, true)\r\n        max = v\r\n        maxSV = new SemVer(max, options)\r\n      }\r\n    }\r\n  })\r\n  return max\r\n}\r\nmodule.exports = maxSatisfying\r\n","const SemVer = require('../classes/semver')\r\nconst Range = require('../classes/range')\r\nconst minSatisfying = (versions, range, options) => {\r\n  let min = null\r\n  let minSV = null\r\n  let rangeObj = null\r\n  try {\r\n    rangeObj = new Range(range, options)\r\n  } catch (er) {\r\n    return null\r\n  }\r\n  versions.forEach((v) => {\r\n    if (rangeObj.test(v)) {\r\n      // satisfies(v, range, options)\r\n      if (!min || minSV.compare(v) === 1) {\r\n        // compare(min, v, true)\r\n        min = v\r\n        minSV = new SemVer(min, options)\r\n      }\r\n    }\r\n  })\r\n  return min\r\n}\r\nmodule.exports = minSatisfying\r\n","const SemVer = require('../classes/semver')\r\nconst Range = require('../classes/range')\r\nconst gt = require('../functions/gt')\r\n\r\nconst minVersion = (range, loose) => {\r\n  range = new Range(range, loose)\r\n\r\n  let minver = new SemVer('0.0.0')\r\n  if (range.test(minver)) {\r\n    return minver\r\n  }\r\n\r\n  minver = new SemVer('0.0.0-0')\r\n  if (range.test(minver)) {\r\n    return minver\r\n  }\r\n\r\n  minver = null\r\n  for (let i = 0; i < range.set.length; ++i) {\r\n    const comparators = range.set[i]\r\n\r\n    let setMin = null\r\n    comparators.forEach((comparator) => {\r\n      // Clone to avoid manipulating the comparator's semver object.\r\n      const compver = new SemVer(comparator.semver.version)\r\n      switch (comparator.operator) {\r\n        case '>':\r\n          if (compver.prerelease.length === 0) {\r\n            compver.patch++\r\n          } else {\r\n            compver.prerelease.push(0)\r\n          }\r\n          compver.raw = compver.format()\r\n          /* fallthrough */\r\n        case '':\r\n        case '>=':\r\n          if (!setMin || gt(compver, setMin)) {\r\n            setMin = compver\r\n          }\r\n          break\r\n        case '<':\r\n        case '<=':\r\n          /* Ignore maximum versions */\r\n          break\r\n        /* istanbul ignore next */\r\n        default:\r\n          throw new Error(`Unexpected operation: ${comparator.operator}`)\r\n      }\r\n    })\r\n    if (setMin && (!minver || gt(minver, setMin))) {\r\n      minver = setMin\r\n    }\r\n  }\r\n\r\n  if (minver && range.test(minver)) {\r\n    return minver\r\n  }\r\n\r\n  return null\r\n}\r\nmodule.exports = minVersion\r\n","const Range = require('../classes/range')\r\nconst validRange = (range, options) => {\r\n  try {\r\n    // Return '*' instead of '' so that truthiness works.\r\n    // This will throw if it's invalid anyway\r\n    return new Range(range, options).range || '*'\r\n  } catch (er) {\r\n    return null\r\n  }\r\n}\r\nmodule.exports = validRange\r\n","const SemVer = require('../classes/semver')\r\nconst Comparator = require('../classes/comparator')\r\nconst { ANY } = Comparator\r\nconst Range = require('../classes/range')\r\nconst satisfies = require('../functions/satisfies')\r\nconst gt = require('../functions/gt')\r\nconst lt = require('../functions/lt')\r\nconst lte = require('../functions/lte')\r\nconst gte = require('../functions/gte')\r\n\r\nconst outside = (version, range, hilo, options) => {\r\n  version = new SemVer(version, options)\r\n  range = new Range(range, options)\r\n\r\n  let gtfn, ltefn, ltfn, comp, ecomp\r\n  switch (hilo) {\r\n    case '>':\r\n      gtfn = gt\r\n      ltefn = lte\r\n      ltfn = lt\r\n      comp = '>'\r\n      ecomp = '>='\r\n      break\r\n    case '<':\r\n      gtfn = lt\r\n      ltefn = gte\r\n      ltfn = gt\r\n      comp = '<'\r\n      ecomp = '<='\r\n      break\r\n    default:\r\n      throw new TypeError('Must provide a hilo val of \"<\" or \">\"')\r\n  }\r\n\r\n  // If it satisfies the range it is not outside\r\n  if (satisfies(version, range, options)) {\r\n    return false\r\n  }\r\n\r\n  // From now on, variable terms are as if we're in \"gtr\" mode.\r\n  // but note that everything is flipped for the \"ltr\" function.\r\n\r\n  for (let i = 0; i < range.set.length; ++i) {\r\n    const comparators = range.set[i]\r\n\r\n    let high = null\r\n    let low = null\r\n\r\n    comparators.forEach((comparator) => {\r\n      if (comparator.semver === ANY) {\r\n        comparator = new Comparator('>=0.0.0')\r\n      }\r\n      high = high || comparator\r\n      low = low || comparator\r\n      if (gtfn(comparator.semver, high.semver, options)) {\r\n        high = comparator\r\n      } else if (ltfn(comparator.semver, low.semver, options)) {\r\n        low = comparator\r\n      }\r\n    })\r\n\r\n    // If the edge version comparator has a operator then our version\r\n    // isn't outside it\r\n    if (high.operator === comp || high.operator === ecomp) {\r\n      return false\r\n    }\r\n\r\n    // If the lowest version comparator has an operator and our version\r\n    // is less than it then it isn't higher than the range\r\n    if ((!low.operator || low.operator === comp) &&\r\n        ltefn(version, low.semver)) {\r\n      return false\r\n    } else if (low.operator === ecomp && ltfn(version, low.semver)) {\r\n      return false\r\n    }\r\n  }\r\n  return true\r\n}\r\n\r\nmodule.exports = outside\r\n","// Determine if version is greater than all the versions possible in the range.\r\nconst outside = require('./outside')\r\nconst gtr = (version, range, options) => outside(version, range, '>', options)\r\nmodule.exports = gtr\r\n","const outside = require('./outside')\r\n// Determine if version is less than all the versions possible in the range\r\nconst ltr = (version, range, options) => outside(version, range, '<', options)\r\nmodule.exports = ltr\r\n","const Range = require('../classes/range')\r\nconst intersects = (r1, r2, options) => {\r\n  r1 = new Range(r1, options)\r\n  r2 = new Range(r2, options)\r\n  return r1.intersects(r2, options)\r\n}\r\nmodule.exports = intersects\r\n","// given a set of versions and a range, create a \"simplified\" range\r\n// that includes the same versions that the original range does\r\n// If the original range is shorter than the simplified one, return that.\r\nconst satisfies = require('../functions/satisfies.js')\r\nconst compare = require('../functions/compare.js')\r\nmodule.exports = (versions, range, options) => {\r\n  const set = []\r\n  let first = null\r\n  let prev = null\r\n  const v = versions.sort((a, b) => compare(a, b, options))\r\n  for (const version of v) {\r\n    const included = satisfies(version, range, options)\r\n    if (included) {\r\n      prev = version\r\n      if (!first) {\r\n        first = version\r\n      }\r\n    } else {\r\n      if (prev) {\r\n        set.push([first, prev])\r\n      }\r\n      prev = null\r\n      first = null\r\n    }\r\n  }\r\n  if (first) {\r\n    set.push([first, null])\r\n  }\r\n\r\n  const ranges = []\r\n  for (const [min, max] of set) {\r\n    if (min === max) {\r\n      ranges.push(min)\r\n    } else if (!max && min === v[0]) {\r\n      ranges.push('*')\r\n    } else if (!max) {\r\n      ranges.push(`>=${min}`)\r\n    } else if (min === v[0]) {\r\n      ranges.push(`<=${max}`)\r\n    } else {\r\n      ranges.push(`${min} - ${max}`)\r\n    }\r\n  }\r\n  const simplified = ranges.join(' || ')\r\n  const original = typeof range.raw === 'string' ? range.raw : String(range)\r\n  return simplified.length < original.length ? simplified : range\r\n}\r\n","const Range = require('../classes/range.js')\r\nconst Comparator = require('../classes/comparator.js')\r\nconst { ANY } = Comparator\r\nconst satisfies = require('../functions/satisfies.js')\r\nconst compare = require('../functions/compare.js')\r\n\r\n// Complex range `r1 || r2 || ...` is a subset of `R1 || R2 || ...` iff:\r\n// - Every simple range `r1, r2, ...` is a null set, OR\r\n// - Every simple range `r1, r2, ...` which is not a null set is a subset of\r\n//   some `R1, R2, ...`\r\n//\r\n// Simple range `c1 c2 ...` is a subset of simple range `C1 C2 ...` iff:\r\n// - If c is only the ANY comparator\r\n//   - If C is only the ANY comparator, return true\r\n//   - Else if in prerelease mode, return false\r\n//   - else replace c with `[>=0.0.0]`\r\n// - If C is only the ANY comparator\r\n//   - if in prerelease mode, return true\r\n//   - else replace C with `[>=0.0.0]`\r\n// - Let EQ be the set of = comparators in c\r\n// - If EQ is more than one, return true (null set)\r\n// - Let GT be the highest > or >= comparator in c\r\n// - Let LT be the lowest < or <= comparator in c\r\n// - If GT and LT, and GT.semver > LT.semver, return true (null set)\r\n// - If any C is a = range, and GT or LT are set, return false\r\n// - If EQ\r\n//   - If GT, and EQ does not satisfy GT, return true (null set)\r\n//   - If LT, and EQ does not satisfy LT, return true (null set)\r\n//   - If EQ satisfies every C, return true\r\n//   - Else return false\r\n// - If GT\r\n//   - If GT.semver is lower than any > or >= comp in C, return false\r\n//   - If GT is >=, and GT.semver does not satisfy every C, return false\r\n//   - If GT.semver has a prerelease, and not in prerelease mode\r\n//     - If no C has a prerelease and the GT.semver tuple, return false\r\n// - If LT\r\n//   - If LT.semver is greater than any < or <= comp in C, return false\r\n//   - If LT is <=, and LT.semver does not satisfy every C, return false\r\n//   - If GT.semver has a prerelease, and not in prerelease mode\r\n//     - If no C has a prerelease and the LT.semver tuple, return false\r\n// - Else return true\r\n\r\nconst subset = (sub, dom, options = {}) => {\r\n  if (sub === dom) {\r\n    return true\r\n  }\r\n\r\n  sub = new Range(sub, options)\r\n  dom = new Range(dom, options)\r\n  let sawNonNull = false\r\n\r\n  OUTER: for (const simpleSub of sub.set) {\r\n    for (const simpleDom of dom.set) {\r\n      const isSub = simpleSubset(simpleSub, simpleDom, options)\r\n      sawNonNull = sawNonNull || isSub !== null\r\n      if (isSub) {\r\n        continue OUTER\r\n      }\r\n    }\r\n    // the null set is a subset of everything, but null simple ranges in\r\n    // a complex range should be ignored.  so if we saw a non-null range,\r\n    // then we know this isn't a subset, but if EVERY simple range was null,\r\n    // then it is a subset.\r\n    if (sawNonNull) {\r\n      return false\r\n    }\r\n  }\r\n  return true\r\n}\r\n\r\nconst minimumVersionWithPreRelease = [new Comparator('>=0.0.0-0')]\r\nconst minimumVersion = [new Comparator('>=0.0.0')]\r\n\r\nconst simpleSubset = (sub, dom, options) => {\r\n  if (sub === dom) {\r\n    return true\r\n  }\r\n\r\n  if (sub.length === 1 && sub[0].semver === ANY) {\r\n    if (dom.length === 1 && dom[0].semver === ANY) {\r\n      return true\r\n    } else if (options.includePrerelease) {\r\n      sub = minimumVersionWithPreRelease\r\n    } else {\r\n      sub = minimumVersion\r\n    }\r\n  }\r\n\r\n  if (dom.length === 1 && dom[0].semver === ANY) {\r\n    if (options.includePrerelease) {\r\n      return true\r\n    } else {\r\n      dom = minimumVersion\r\n    }\r\n  }\r\n\r\n  const eqSet = new Set()\r\n  let gt, lt\r\n  for (const c of sub) {\r\n    if (c.operator === '>' || c.operator === '>=') {\r\n      gt = higherGT(gt, c, options)\r\n    } else if (c.operator === '<' || c.operator === '<=') {\r\n      lt = lowerLT(lt, c, options)\r\n    } else {\r\n      eqSet.add(c.semver)\r\n    }\r\n  }\r\n\r\n  if (eqSet.size > 1) {\r\n    return null\r\n  }\r\n\r\n  let gtltComp\r\n  if (gt && lt) {\r\n    gtltComp = compare(gt.semver, lt.semver, options)\r\n    if (gtltComp > 0) {\r\n      return null\r\n    } else if (gtltComp === 0 && (gt.operator !== '>=' || lt.operator !== '<=')) {\r\n      return null\r\n    }\r\n  }\r\n\r\n  // will iterate one or zero times\r\n  for (const eq of eqSet) {\r\n    if (gt && !satisfies(eq, String(gt), options)) {\r\n      return null\r\n    }\r\n\r\n    if (lt && !satisfies(eq, String(lt), options)) {\r\n      return null\r\n    }\r\n\r\n    for (const c of dom) {\r\n      if (!satisfies(eq, String(c), options)) {\r\n        return false\r\n      }\r\n    }\r\n\r\n    return true\r\n  }\r\n\r\n  let higher, lower\r\n  let hasDomLT, hasDomGT\r\n  // if the subset has a prerelease, we need a comparator in the superset\r\n  // with the same tuple and a prerelease, or it's not a subset\r\n  let needDomLTPre = lt &&\r\n    !options.includePrerelease &&\r\n    lt.semver.prerelease.length ? lt.semver : false\r\n  let needDomGTPre = gt &&\r\n    !options.includePrerelease &&\r\n    gt.semver.prerelease.length ? gt.semver : false\r\n  // exception: <1.2.3-0 is the same as <1.2.3\r\n  if (needDomLTPre && needDomLTPre.prerelease.length === 1 &&\r\n      lt.operator === '<' && needDomLTPre.prerelease[0] === 0) {\r\n    needDomLTPre = false\r\n  }\r\n\r\n  for (const c of dom) {\r\n    hasDomGT = hasDomGT || c.operator === '>' || c.operator === '>='\r\n    hasDomLT = hasDomLT || c.operator === '<' || c.operator === '<='\r\n    if (gt) {\r\n      if (needDomGTPre) {\r\n        if (c.semver.prerelease && c.semver.prerelease.length &&\r\n            c.semver.major === needDomGTPre.major &&\r\n            c.semver.minor === needDomGTPre.minor &&\r\n            c.semver.patch === needDomGTPre.patch) {\r\n          needDomGTPre = false\r\n        }\r\n      }\r\n      if (c.operator === '>' || c.operator === '>=') {\r\n        higher = higherGT(gt, c, options)\r\n        if (higher === c && higher !== gt) {\r\n          return false\r\n        }\r\n      } else if (gt.operator === '>=' && !satisfies(gt.semver, String(c), options)) {\r\n        return false\r\n      }\r\n    }\r\n    if (lt) {\r\n      if (needDomLTPre) {\r\n        if (c.semver.prerelease && c.semver.prerelease.length &&\r\n            c.semver.major === needDomLTPre.major &&\r\n            c.semver.minor === needDomLTPre.minor &&\r\n            c.semver.patch === needDomLTPre.patch) {\r\n          needDomLTPre = false\r\n        }\r\n      }\r\n      if (c.operator === '<' || c.operator === '<=') {\r\n        lower = lowerLT(lt, c, options)\r\n        if (lower === c && lower !== lt) {\r\n          return false\r\n        }\r\n      } else if (lt.operator === '<=' && !satisfies(lt.semver, String(c), options)) {\r\n        return false\r\n      }\r\n    }\r\n    if (!c.operator && (lt || gt) && gtltComp !== 0) {\r\n      return false\r\n    }\r\n  }\r\n\r\n  // if there was a < or >, and nothing in the dom, then must be false\r\n  // UNLESS it was limited by another range in the other direction.\r\n  // Eg, >1.0.0 <1.0.1 is still a subset of <2.0.0\r\n  if (gt && hasDomLT && !lt && gtltComp !== 0) {\r\n    return false\r\n  }\r\n\r\n  if (lt && hasDomGT && !gt && gtltComp !== 0) {\r\n    return false\r\n  }\r\n\r\n  // we needed a prerelease range in a specific tuple, but didn't get one\r\n  // then this isn't a subset.  eg >=1.2.3-pre is not a subset of >=1.0.0,\r\n  // because it includes prereleases in the 1.2.3 tuple\r\n  if (needDomGTPre || needDomLTPre) {\r\n    return false\r\n  }\r\n\r\n  return true\r\n}\r\n\r\n// >=1.2.3 is lower than >1.2.3\r\nconst higherGT = (a, b, options) => {\r\n  if (!a) {\r\n    return b\r\n  }\r\n  const comp = compare(a.semver, b.semver, options)\r\n  return comp > 0 ? a\r\n    : comp < 0 ? b\r\n    : b.operator === '>' && a.operator === '>=' ? b\r\n    : a\r\n}\r\n\r\n// <=1.2.3 is higher than <1.2.3\r\nconst lowerLT = (a, b, options) => {\r\n  if (!a) {\r\n    return b\r\n  }\r\n  const comp = compare(a.semver, b.semver, options)\r\n  return comp < 0 ? a\r\n    : comp > 0 ? b\r\n    : b.operator === '<' && a.operator === '<=' ? b\r\n    : a\r\n}\r\n\r\nmodule.exports = subset\r\n"]}